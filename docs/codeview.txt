en 
Este archivo contiene todo el código necesario para implementar el sistema de "Visor de Eventos del Sistema" en otro proyecto.

El sistema se compone de varias partes que trabajan juntas:
1. Definición de Tipos: La estructura de un evento (log).
2. Esquema de Base de Datos: La tabla SQL para almacenar los logs.
3. Lógica del Logger: Funciones del lado del servidor para interactuar con la base de datos.
4. Acciones del Servidor: Funciones que exponen la lógica del logger al cliente.
5. Componente de Frontend: La interfaz de usuario en React para visualizar y gestionar los logs.

---
### 1. Definición de Tipos (src/types/logs.ts)
---
// Define la estructura de una entrada de log.

export type LogType = 'info' | 'warn' | 'error';

export interface LogInput {
    type: LogType;
    context: string; // e.g., 'API', 'Queue', 'Settings'
    message: string;
    details?: any; // For storing extra data like error objects
}

export interface LogEntry extends LogInput {
    id: string;
    timestamp: number;
}


---
### 2. Esquema de la Base de Datos (de src/lib/db.ts)
---
// Este es el código SQL para crear la tabla que almacena los logs.
// Debe incluirse en la inicialización de tu base de datos.

`
CREATE TABLE IF NOT EXISTS logs (
  id TEXT PRIMARY KEY,
  timestamp INTEGER NOT NULL,
  type TEXT NOT NULL,
  context TEXT NOT NULL,
  message TEXT NOT NULL,
  details TEXT
);
`

---
### 3. Lógica del Logger (src/lib/logger.ts)
---
// Estas son las funciones principales para gestionar los logs en el servidor.

import { getDb } from './db'; // Asegúrate de tener tu propia función getDb
import type { LogEntry, LogInput } from '@/types/logs';

export function addLog(logInput: LogInput): void {
  const db = getDb();
  try {
    const newLog: LogEntry = {
      ...logInput,
      id: crypto.randomUUID(),
      timestamp: Date.now(),
      details: logInput.details || null,
    };

    const stmt = db.prepare(`
      INSERT INTO logs (id, timestamp, type, context, message, details)
      VALUES (?, ?, ?, ?, ?, ?)
    `);
    
    stmt.run(
      newLog.id,
      newLog.timestamp,
      newLog.type,
      newLog.context,
      newLog.message,
      newLog.details ? JSON.stringify(newLog.details) : null
    );
  } catch (error) {
      console.error("[LOG_DB] Failed to write log to database:", error);
  }
}

export function getLogs(): LogEntry[] {
  const db = getDb();
  try {
    const stmt = db.prepare('SELECT * FROM logs ORDER BY timestamp DESC LIMIT 100');
    const logs = stmt.all() as any[];

    // Parsear detalles si es un string JSON
    return logs.map(log => ({
      ...log,
      details: log.details ? JSON.parse(log.details) : undefined,
    }));
  } catch (error) {
      console.error("[LOG_DB] Failed to read logs from database:", error);
      return [];
  }
}

export function clearLogs(): void {
  const db = getDb();
  try {
    db.exec('DELETE FROM logs');
    addLog({ type: 'info', context: 'System', message: 'Logs have been cleared.' });
  } catch (error)      {
      console.error("[LOG_DB] Failed to clear logs from database:", error);
  }
}


---
### 4. Acciones del Servidor (src/actions/logActions.ts)
---
// Estas funciones "Server Actions" se llaman desde el componente de React.

"use server";

import { revalidatePath } from "next/cache";
import { 
  getLogs as getLogsFromStore,
  clearLogs as clearLogsFromStore,
} from "@/lib/logger"; // Ajusta la ruta a tu archivo logger
import type { LogEntry } from "@/types/logs";

export async function getLogs(): Promise<LogEntry[]> {
  return getLogsFromStore();
}

export async function clearLogs(): Promise<{ success: boolean; message?: string }> {
  clearLogsFromStore();
  revalidatePath("/settings"); // O la ruta donde se encuentre tu visor
  return { success: true, message: "Logs cleared successfully." };
}


---
### 5. Componente de Frontend (React / shadcn/ui)
---
// Este es el fragmento de código del componente de React que renderiza el visor de eventos.
// Utiliza componentes de shadcn/ui como Accordion, Button, ScrollArea, etc.

"use client";

import { useState } from 'react';
import { Button, buttonVariants } from '@/components/ui/button';
import { useToast } from "@/hooks/use-toast";
import { RefreshCw, Loader2, ListCollapse, ListX, Download } from 'lucide-react';
import { getLogs, clearLogs } from '@/actions/logActions'; // Ajusta la ruta
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from "@/components/ui/alert-dialog";
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '../ui/accordion';
import type { LogEntry } from '@/types/logs';
import { cn } from '@/lib/utils';
import { ScrollArea } from '../ui/scroll-area';

function SystemLogViewer() {
  const { toast } = useToast();
  const [logs, setLogs] = useState<LogEntry[]>([]);
  const [isLogLoading, setIsLogLoading] = useState(false);

  const handleFetchLogs = async () => {
    setIsLogLoading(true);
    try {
        const fetchedLogs = await getLogs();
        setLogs(fetchedLogs);
        toast({ title: "Logs Cargados", description: `Se encontraron ${fetchedLogs.length} eventos.` });
    } catch(e) {
        toast({ title: "Error al Cargar Logs", variant: "destructive" });
    } finally {
        setIsLogLoading(false);
    }
  };

  const handleClearLogs = async () => {
    setIsLogLoading(true);
    try {
        await clearLogs();
        setLogs([]);
        toast({ title: "Logs Limpiados" });
    } catch (e) {
        toast({ title: "Error al Limpiar Logs", variant: "destructive" });
    } finally {
        setIsLogLoading(false);
    }
  };
  
  const handleDownloadLogs = () => {
    const logContent = logs
      .map(log => `[${log.type.toUpperCase()}] ${new Date(log.timestamp).toLocaleString()} [${log.context}]\n${log.message}${log.details ? `\nDETAILS: ${JSON.stringify(log.details)}` : ''}`)
      .join('\n\n');
    
    const blob = new Blob([logContent], { type: 'text/plain;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `system-logs-${new Date().toISOString()}.txt`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  return (
    <AccordionItem value="system-logs">
      <AccordionTrigger className="text-lg font-semibold px-6">
        <div className="flex items-center gap-2"><ListCollapse /> Visor de Eventos del Sistema</div>
      </AccordionTrigger>
      <AccordionContent className="space-y-4 px-6 pb-6">
        <p className="text-sm text-muted-foreground -mt-2 mb-2">
          Aquí se registran eventos importantes y errores del sistema.
        </p>
        <div className="flex gap-2 flex-wrap">
            <Button onClick={handleFetchLogs} disabled={isLogLoading} variant="outline" type="button">
                {isLogLoading ? <Loader2 className="mr-2 h-4 w-4 animate-spin"/> : <RefreshCw className="mr-2 h-4 w-4"/>}
                Cargar Eventos
            </Button>
            <Button onClick={handleDownloadLogs} disabled={isLogLoading || logs.length === 0} variant="outline" type="button">
                <Download className="mr-2 h-4 w-4"/>
                Descargar Logs
            </Button>
            <AlertDialog>
                <AlertDialogTrigger asChild>
                    <Button disabled={isLogLoading || logs.length === 0} variant="destructive" type="button"><ListX className="mr-2 h-4 w-4" />Limpiar Eventos</Button>
                </AlertDialogTrigger>
                <AlertDialogContent>
                    <AlertDialogHeader><AlertDialogTitle>¿Está seguro?</AlertDialogTitle><AlertDialogDescription>Esta acción borrará permanentemente todos los registros de eventos. No se puede deshacer.</AlertDialogDescription></AlertDialogHeader>
                    <AlertDialogFooter>
                        <AlertDialogCancel>Cancelar</AlertDialogCancel>
                        <AlertDialogAction onClick={handleClearLogs} className={cn(buttonVariants({variant: "destructive"}))}>Confirmar Borrado</AlertDialogAction>
                    </AlertDialogFooter>
                </AlertDialogContent>
            </AlertDialog>
        </div>
        <ScrollArea className="h-72 w-full rounded-md border p-2 bg-muted/20">
        {logs.length > 0 ? (
            <div className="space-y-2 p-2">
            {logs.map((log) => (
                <div key={log.id} className="text-xs font-mono p-2 rounded-md bg-background shadow-sm">
                <div className={cn(
                    "font-bold flex items-center gap-2",
                    log.type === 'error' && 'text-red-500',
                    log.type === 'warn' && 'text-yellow-500',
                    log.type === 'info' && 'text-blue-500'
                )}>
                    <span>[{log.type.toUpperCase()}]</span>
                    <span>{new Date(log.timestamp).toLocaleString()}</span>
                    <span>[{log.context}]</span>
                </div>
                <p className="pl-2 whitespace-pre-wrap break-words">{log.message}</p>
                {log.details && <p className="pl-2 text-xs opacity-70 break-all">Detalles: {JSON.stringify(log.details)}</p>}
                </div>
            ))}
            </div>
        ) : (
            <div className="flex items-center justify-center h-full">
                <p className="text-sm text-muted-foreground">No hay eventos para mostrar.</p>
            </div>
        )}
        </ScrollArea>
      </AccordionContent>
    </AccordionItem>
  );
}
