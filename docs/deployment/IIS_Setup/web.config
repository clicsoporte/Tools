<!--
============================================================================================================
web.config for deploying a Next.js 14+ app on IIS with iisnode
Version 1.2
============================================================================================================

This configuration file tells IIS how to handle incoming requests for a Next.js application.

Key Features:
- Handles both SSR (Server-Side Rendering) and static file serving.
- Improves performance by letting IIS handle static files directly (images, CSS, JS chunks).
- Correctly forwards requests for Next.js API routes and pages to the Node.js server.
- Enables detailed logging for iisnode for easier debugging.

How it works:
1.  URL Rewrite rules are processed from top to bottom.
2.  The first rule checks if the request is for a static file within the `_next/static` directory.
    If it is, the rule stops processing (`stopProcessing="true"`) and lets IIS serve the file directly.
3.  The second rule is a catch-all. If the request is not a static file, it rewrites the URL to `server.js`,
    which is the entry point for the Next.js server managed by iisnode.
4.  The `<iisnode>` handler then takes over and processes the request via Node.js.

Prerequisites:
- IIS with iisnode module installed.
- IIS URL Rewrite module installed.
-->

<configuration>
  <system.webServer>
    <handlers>
      <!--
        This handler tells IIS to use iisnode for any requests that are rewritten
        to `server.js`.
      -->
      <add name="iisnode" path="server.js" verb="*" modules="iisnode" />
    </handlers>
    
    <rewrite>
      <rules>
        <!--
          Rule 1: Serve static files directly from IIS for performance.
          This rule matches any request for a file inside the `_next/static` folder
          and tells IIS to handle it, stopping further rules from being processed.
        -->
        <rule name="StaticContent" stopProcessing="true">
          <match url="^(\_next\/static\/.*)" />
          <action type="None" />
        </rule>
        
        <!--
          Rule 2: Forward all other requests to the Next.js server.
          This is the main rule that enables Server-Side Rendering (SSR) and API routes.
          It takes any request that didn't match the static content rule and sends it
          to `server.js` to be handled by Next.js.
        -->
        <rule name="NextJs">
          <match url=".*" />
          <action type="Rewrite" url="server.js" />
        </rule>
      </rules>
    </rewrite>

    <!--
      iisnode configuration.
      - node_env: Sets the environment to production for better performance.
      - loggingEnabled: Enables logging for debugging. Logs will be created in an `iisnode` directory.
      - devErrorsEnabled: Shows detailed errors during development. Set to `false` in a production environment.
    -->
    <iisnode
      node_env="production"
      loggingEnabled="true"
      devErrorsEnabled="true"
      interceptor="iisnode-interceptor.js"
    />
    
    <!--
      The `web.config` file might be locked on the server.
      This setting allows this local `web.config` to override server settings.
    -->
    <security>
      <requestFiltering>
        <hiddenSegments>
          <add segment="node_modules" />
          <add segment="iisnode" />
        </hiddenSegments>
      </requestFiltering>
    </security>

  </system.webServer>
</configuration>
