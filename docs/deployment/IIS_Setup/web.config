<!--
============================================================================================================
 Web.config para Clic-Tools (Next.js 14+ con App Router) en IIS con iisnode
 v1.5
============================================================================================================
 
 Este archivo realiza tres tareas clave:
 1. URL Rewrite: Reenvía todas las solicitudes (excepto las de archivos estáticos) a `server.js`, 
    que es el servidor de Next.js.
 2. iisnode Handler: Le dice a IIS que use `iisnode` para ejecutar el archivo `server.js`, 
    permitiendo que la aplicación Node.js se ejecute dentro de IIS.
 3. Optimización de Estáticos: Permite que IIS sirva directamente los archivos estáticos de Next.js 
    (CSS, JS, imágenes), lo que mejora significativamente el rendimiento al no pasar por Node.js.
 4. Aumento del Límite de Petición: Se ha añadido una sección <requestLimits> para aumentar el tamaño 
    máximo del contenido de una petición a 50MB, evitando errores al guardar formularios grandes.
 
============================================================================================================
-->
<configuration>
  <system.webServer>
    
    <!-- GESTIÓN DE PETICIONES Y ERRORES -->
    <handlers>
      <!-- Indica que iisnode debe gestionar las peticiones que llegan al archivo server.js -->
      <add name="iisnode" path="server.js" verb="*" modules="iisnode" />
    </handlers>

    <!-- REGLAS DE REESCRITURA DE URL -->
    <rewrite>
      <rules>
        <!-- Regla 1: No reescribir las URLs de la API de Next.js -->
        <rule name="NextAPIs" stopProcessing="true">
          <match url="^api/.*" />
          <action type="None" />
        </rule>

        <!-- Regla 2: Servir archivos estáticos directamente desde IIS para máximo rendimiento -->
        <rule name="NextStatics" stopProcessing="true">
           <match url="^(_next/static/.*)" />
           <action type="None" />
        </rule>

        <!-- Regla 3: Reescribir todas las demás peticiones para que las maneje Next.js -->
        <rule name="NextRouter" stopProcessing="true">
          <match url=".*" />
          <conditions logicalGrouping="MatchAll">
            <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="true" />
            <add input="{REQUEST_FILENAME}" matchType="IsDirectory" negate="true" />
          </conditions>
          <action type="Rewrite" url="server.js" />
        </rule>
      </rules>
    </rewrite>

    <!-- CONFIGURACIÓN DE SEGURIDAD Y LÍMITES -->
    <security>
      <requestFiltering>
        <!-- 
          Aumenta el límite del tamaño del cuerpo de la petición a 50 MB (el valor está en bytes).
          50 * 1024 * 1024 = 52428800.
          Esto es crucial para evitar errores 'NetworkError' al enviar formularios grandes, 
          como la página de configuración de importación con consultas SQL extensas.
        -->
        <requestLimits maxAllowedContentLength="52428800" />
      </requestFiltering>
    </security>

    <!-- CONFIGURACIÓN DE IISNODE -->
    <!-- 
      - loggingEnabled: Habilita la creación de logs para depuración.
      - devErrorsEnabled: Muestra errores detallados en el navegador (solo para desarrollo).
      - node_env: Establece el entorno de Node.js a "producción".
      - interceptor: Apunta a un script que puede modificar la respuesta antes de enviarla al cliente.
    -->
    <iisnode 
      loggingEnabled="true"
      devErrorsEnabled="true"
      node_env="production"
      interceptor="iisnode-interceptor.js" 
    />

  </system.webServer>

  <!-- Manejo de documentos por defecto (opcional, pero buena práctica) -->
  <system.web>
    <compilation debug="true" />
  </system.web>

</configuration>
