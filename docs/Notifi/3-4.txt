
### CONTENIDO ORIGINAL ###

import { ReactEventHandler } from 'react';
import { RiSearchLine } from 'react-icons/ri';
import { Button } from './primitives/button';

export const ListNoResults = ({
  title,
  description,
  onClearFilters,
}: {
  title: string;
  description: string;
  onClearFilters?: ReactEventHandler<HTMLButtonElement>;
}) => {
  return (
    <div className="flex flex-1 flex-col items-center justify-center gap-4">
      <div className="flex max-w-md flex-col items-center gap-4 text-center">
        <div className="flex h-12 w-12 items-center justify-center rounded-full bg-neutral-100">
          <RiSearchLine className="size-6 text-neutral-600" aria-hidden="true" />
        </div>
        <div className="flex flex-col gap-1">
          <h3 className="text-foreground-900 block font-medium">{title}</h3>
          <p className="text-foreground-400 max-w-[60ch] text-sm">{description}</p>
        </div>
      </div>
      {onClearFilters && (
        <Button variant="secondary" onClick={onClearFilters}>
          Clear filters
        </Button>
      )}
    </div>
  );
};


### ANALISIS AUTOMATICO (ESPAÑOL) ###

import { ReactEventHandler } from 'react';
import { RiSearchLine } from 'react-icons/ri';
import { Button } from './primitives/button';
export const ListNoResults = ({
Contiene declaraciones 'import' (posible Python u otro).

### SUGERENCIAS PARA CREAR TU PROPIA VERSIÓN ###

- Añade un README describiendo qué hace este archivo.
- Si es parte de un proyecto, indica dependencia y punto de entrada.



################################################################################
Archivo: novu-next/apps/dashboard/src/components/page-meta.tsx
Tamaño: 243 bytes
Lenguaje detectado: TSX

### CONTENIDO ORIGINAL ###

import { Helmet } from 'react-helmet-async';

type Props = {
  title?: string;
};

export function PageMeta({ title }: Props) {
  return (
    <Helmet>
      <title>{title ? `${title} | ` : ``}Novu Cloud Dashboard</title>
    </Helmet>
  );
}


### ANALISIS AUTOMATICO (ESPAÑOL) ###

import { Helmet } from 'react-helmet-async';
type Props = {
title?: string;
};
Contiene declaraciones 'import' (posible Python u otro).

### SUGERENCIAS PARA CREAR TU PROPIA VERSIÓN ###

- Añade un README describiendo qué hace este archivo.
- Si es parte de un proyecto, indica dependencia y punto de entrada.



################################################################################
Archivo: novu-next/apps/dashboard/src/components/pause-workflow-dialog.tsx
Tamaño: 390 bytes
Lenguaje detectado: TSX

### CONTENIDO ORIGINAL ###

import TruncatedText from './truncated-text';

export const PauseModalDescription = ({ workflowName }: { workflowName: string }) => (
  <>
    Pausing the <TruncatedText className="max-w-[32ch] font-bold">{workflowName}</TruncatedText> workflow will
    immediately prevent you from being able to trigger it.
  </>
);

export const PAUSE_MODAL_TITLE = 'Proceeding will pause the workflow';


### ANALISIS AUTOMATICO (ESPAÑOL) ###

import TruncatedText from './truncated-text';
export const PauseModalDescription = ({ workflowName }: { workflowName: string }) => (
<>
Pausing the <TruncatedText className="max-w-[32ch] font-bold">{workflowName}</TruncatedText> workflow will
Contiene declaraciones 'import' (posible Python u otro).

### SUGERENCIAS PARA CREAR TU PROPIA VERSIÓN ###

- Añade un README describiendo qué hace este archivo.
- Si es parte de un proyecto, indica dependencia y punto de entrada.



################################################################################
Archivo: novu-next/apps/dashboard/src/components/preview-context-section.tsx
Tamaño: 2822 bytes
Lenguaje detectado: TSX

### CONTENIDO ORIGINAL ###

import { RiInformation2Line, RiRefreshLine } from 'react-icons/ri';
import { AccordionContent, AccordionItem, AccordionTrigger } from '@/components/primitives/accordion';
import { Tooltip, TooltipContent, TooltipTrigger } from '@/components/primitives/tooltip';
import { ContextSearchEditor } from './context-search-editor';
import { Button } from './primitives/button';
import { ACCORDION_STYLES } from './workflow-editor/steps/constants/preview-context.constants';
import { ContextSectionProps } from './workflow-editor/steps/types/preview-context.types';

export function PreviewContextSection({ error, context, schema, onUpdate, onClearPersisted }: ContextSectionProps) {
  return (
    <AccordionItem value="context" className={ACCORDION_STYLES.item}>
      <AccordionTrigger className={ACCORDION_STYLES.trigger}>
        <div className="flex w-full items-center justify-between">
          <div className="flex items-center gap-2">
            <div className="flex items-center gap-0.5">
              Context
              <Tooltip>
                <TooltipTrigger asChild>
                  <span className="text-foreground-400 inline-block hover:cursor-help">
                    <RiInformation2Line className="size-3" />
                  </span>
                </TooltipTrigger>
                <TooltipContent className="max-w-xs">
                  Context provides additional data that can be used in your workflow, such as tenant or
                  application-specific information.
                </TooltipContent>
              </Tooltip>
            </div>
          </div>
          {onClearPersisted && (
            <div className="mr-2">
              <Button
                onClick={(e) => {
                  e.stopPropagation();
                  e.preventDefault();
                  onClearPersisted();
                }}
                type="button"
                variant="secondary"
                mode="ghost"
                size="2xs"
                className="text-foreground-600 gap-1"
              >
                <RiRefreshLine className="h-3 w-3" />
                Reset defaults
              </Button>
            </div>
          )}
        </div>
      </AccordionTrigger>
      <AccordionContent className="flex flex-col gap-2">
        <ContextSearchEditor
          value={context}
          schema={schema}
          onUpdate={(updatedData) => onUpdate('context', updatedData)}
          error={error ?? undefined}
        />
        <div className="text-text-soft flex items-center gap-1.5 text-[10px] font-normal leading-[13px]">
          <RiInformation2Line className="h-3 w-3 flex-shrink-0" />
          <span>Changes here only affect the preview and won't be saved to the context.</span>
        </div>
      </AccordionContent>
    </AccordionItem>
  );
}


### ANALISIS AUTOMATICO (ESPAÑOL) ###

import { RiInformation2Line, RiRefreshLine } from 'react-icons/ri';
import { AccordionContent, AccordionItem, AccordionTrigger } from '@/components/primitives/accordion';
import { Tooltip, TooltipContent, TooltipTrigger } from '@/components/primitives/tooltip';
import { ContextSearchEditor } from './context-search-editor';
import { Button } from './primitives/button';
Contiene declaraciones 'import' (posible Python u otro).

### SUGERENCIAS PARA CREAR TU PROPIA VERSIÓN ###

- Añade un README describiendo qué hace este archivo.
- Si es parte de un proyecto, indica dependencia y punto de entrada.



################################################################################
Archivo: novu-next/apps/dashboard/src/components/preview-subscriber-section.tsx
Tamaño: 4244 bytes
Lenguaje detectado: TSX

### CONTENIDO ORIGINAL ###

import { useState } from 'react';
import { RiEdit2Line, RiInformation2Line, RiRefreshLine } from 'react-icons/ri';
import { AccordionContent, AccordionItem, AccordionTrigger } from '@/components/primitives/accordion';
import { Tooltip, TooltipContent, TooltipTrigger } from '@/components/primitives/tooltip';
import { SubscriberAutocomplete } from '@/components/subscribers/subscriber-autocomplete';
import { Button } from './primitives/button';
import { ACCORDION_STYLES } from './workflow-editor/steps/constants/preview-context.constants';
import { EditableJsonViewer } from './workflow-editor/steps/shared/editable-json-viewer/editable-json-viewer';
import { SubscriberSectionProps } from './workflow-editor/steps/types/preview-context.types';

export function PreviewSubscriberSection({
  error,
  subscriber,
  schema,
  onUpdate,
  onSubscriberSelect,
  onClearPersisted,
  onEditSubscriber,
}: SubscriberSectionProps) {
  const [searchQuery, setSearchQuery] = useState('');

  return (
    <AccordionItem value="subscriber" className={ACCORDION_STYLES.item}>
      <AccordionTrigger className={ACCORDION_STYLES.trigger}>
        <div className="flex w-full items-center justify-between">
          <div className="flex items-center gap-2">
            <div className="flex items-center gap-0.5">
              Subscriber
              <Tooltip>
                <TooltipTrigger asChild>
                  <span className="text-foreground-400 inline-block hover:cursor-help">
                    <RiInformation2Line className="size-3" />
                  </span>
                </TooltipTrigger>
                <TooltipContent className="max-w-xs">
                  Information about the recipient of the notification, including their profile data and preferences.
                </TooltipContent>
              </Tooltip>
            </div>
          </div>
          {onEditSubscriber ? (
            <div className="mr-2">
              <Button
                onClick={(e) => {
                  e.stopPropagation();
                  e.preventDefault();

                  onEditSubscriber();
                }}
                type="button"
                variant="secondary"
                mode="ghost"
                size="2xs"
                className="text-foreground-600 gap-1"
              >
                <RiEdit2Line className="h-3 w-3" />
                Edit subscriber
              </Button>
            </div>
          ) : onClearPersisted ? (
            <div className="mr-2">
              <Button
                onClick={(e) => {
                  e.stopPropagation();
                  e.preventDefault();

                  onClearPersisted();
                }}
                type="button"
                variant="secondary"
                mode="ghost"
                size="2xs"
                className="text-foreground-600 gap-1"
              >
                <RiRefreshLine className="h-3 w-3" />
                Reset defaults
              </Button>
            </div>
          ) : null}
        </div>
      </AccordionTrigger>
      <AccordionContent className="flex flex-col gap-2">
        <SubscriberAutocomplete
          value={searchQuery}
          onChange={setSearchQuery}
          onSelectSubscriber={(subscriber) => {
            onSubscriberSelect(subscriber);
            setSearchQuery('');
          }}
          size="xs"
          className="w-full"
        />
        <div className="flex flex-1 flex-col gap-2 overflow-auto">
          <EditableJsonViewer
            value={subscriber}
            onChange={(updatedData) => onUpdate('subscriber', updatedData)}
            schema={schema}
            className={ACCORDION_STYLES.jsonViewer}
            isReadOnly={!!onEditSubscriber}
          />
          {error && <p className="text-destructive text-xs">{error}</p>}
        </div>
        {onEditSubscriber && (
          <div className="text-text-soft flex items-center gap-1.5 text-[10px] font-normal leading-[13px]">
            <RiInformation2Line className="h-3 w-3 flex-shrink-0" />
            <span>Click "Edit subscriber" above to modify subscriber details.</span>
          </div>
        )}
      </AccordionContent>
    </AccordionItem>
  );
}


### ANALISIS AUTOMATICO (ESPAÑOL) ###

import { useState } from 'react';
import { RiEdit2Line, RiInformation2Line, RiRefreshLine } from 'react-icons/ri';
import { AccordionContent, AccordionItem, AccordionTrigger } from '@/components/primitives/accordion';
import { Tooltip, TooltipContent, TooltipTrigger } from '@/components/primitives/tooltip';
import { SubscriberAutocomplete } from '@/components/subscribers/subscriber-autocomplete';
Contiene declaraciones 'import' (posible Python u otro).

### SUGERENCIAS PARA CREAR TU PROPIA VERSIÓN ###

- Añade un README describiendo qué hace este archivo.
- Si es parte de un proyecto, indica dependencia y punto de entrada.



################################################################################
Archivo: novu-next/apps/dashboard/src/components/regenerate-api-keys-dialog.tsx
Tamaño: 3809 bytes
Lenguaje detectado: TSX

### CONTENIDO ORIGINAL ###

import { IEnvironment } from '@novu/shared';
import { useState } from 'react';
import { RiAlertFill } from 'react-icons/ri';
import { Button } from '@/components/primitives/button';
import {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
} from '@/components/primitives/dialog';
import { Input } from '@/components/primitives/input';

interface RegenerateApiKeysDialogProps {
  environment?: IEnvironment;
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onConfirm: () => void;
  isLoading?: boolean;
}

export const RegenerateApiKeysDialog = ({
  environment,
  open,
  onOpenChange,
  onConfirm,
  isLoading,
}: RegenerateApiKeysDialogProps) => {
  const [environmentName, setEnvironmentName] = useState('');

  const handleOpenChange = (newOpen: boolean) => {
    if (!newOpen) {
      setEnvironmentName('');
    }

    onOpenChange(newOpen);
  };

  const handleConfirm = () => {
    onConfirm();
    setEnvironmentName('');
  };

  const isConfirmDisabled = environmentName !== environment?.name || isLoading;

  if (!environment) {
    return null;
  }

  return (
    <Dialog modal open={open} onOpenChange={handleOpenChange}>
      <DialogPortal>
        <DialogOverlay />
        <DialogContent className="overflow-hidden sm:max-w-[480px]">
          <div className="flex items-start gap-4 self-stretch">
            <div className="bg-warning/10 flex items-center justify-center gap-2 rounded-[10px] p-2">
              <RiAlertFill className="text-warning size-6" />
            </div>
            <div className="flex flex-1 flex-col items-start gap-3">
              <DialogTitle className="text-md font-medium">Regenerate API Keys</DialogTitle>
              <DialogDescription className="text-foreground-600 space-y-3">
                <p>
                  This action will invalidate all existing API keys for the{' '}
                  <span className="text-foreground-950 font-semibold">{environment.name}</span> environment.
                </p>
                <p className="text-sm">
                  All applications using the current keys will need to be updated with the new keys immediately after
                  regeneration.
                </p>
              </DialogDescription>

              <div className="w-full space-y-2">
                <label htmlFor="environment-confirmation" className="text-foreground-700 text-sm font-medium">
                  Type <span className="text-foreground-950 font-semibold">{environment.name}</span> to confirm
                </label>
                <Input
                  id="environment-confirmation"
                  placeholder={`Enter "${environment.name}" to confirm`}
                  value={environmentName}
                  onChange={(e) => setEnvironmentName(e.target.value)}
                  autoFocus
                  autoComplete="off"
                  className="font-mono"
                />
              </div>
            </div>
          </div>

          <DialogFooter className="gap-3">
            <DialogClose asChild aria-label="Close">
              <Button
                type="button"
                size="sm"
                mode="outline"
                variant="secondary"
                onClick={() => handleOpenChange(false)}
              >
                Cancel
              </Button>
            </DialogClose>

            <Button
              type="button"
              size="sm"
              variant="error"
              onClick={handleConfirm}
              isLoading={isLoading}
              disabled={isConfirmDisabled}
            >
              Regenerate Keys
            </Button>
          </DialogFooter>
        </DialogContent>
      </DialogPortal>
    </Dialog>
  );
};


### ANALISIS AUTOMATICO (ESPAÑOL) ###

import { IEnvironment } from '@novu/shared';
import { useState } from 'react';
import { RiAlertFill } from 'react-icons/ri';
import { Button } from '@/components/primitives/button';
import {
Contiene declaraciones 'import' (posible Python u otro).

### SUGERENCIAS PARA CREAR TU PROPIA VERSIÓN ###

- Añade un README describiendo qué hace este archivo.
- Si es parte de un proyecto, indica dependencia y punto de entrada.



################################################################################
Archivo: novu-next/apps/dashboard/src/components/resource-row.tsx
Tamaño: 2330 bytes
Lenguaje detectado: TSX

### CONTENIDO ORIGINAL ###

import { RiLayout5Line, RiRouteFill, RiTranslate2 } from 'react-icons/ri';
import type { IResourceDiffResult } from '@/api/environments';
import { formatDateSimple } from '@/utils/format-date';

type ResourceRowProps = {
  resource: IResourceDiffResult;
};

const RESOURCE_ICONS = {
  workflow: RiRouteFill,
  layout: RiLayout5Line,
  translation: RiTranslate2,
} as const;
const DEFAULT_RESOURCE_ICON = RiRouteFill;
const DEFAULT_RESOURCE_NAME = 'Unnamed Resource';
const DEFAULT_ICON_COLOR = 'text-feature';

export function ResourceRow({ resource }: ResourceRowProps) {
  const IconComponent =
    RESOURCE_ICONS[resource.resourceType as keyof typeof RESOURCE_ICONS] ?? DEFAULT_RESOURCE_ICON;
  const displayName =
    resource.targetResource?.name ?? resource.sourceResource?.name ?? DEFAULT_RESOURCE_NAME;
  const identifier = displayName.toLowerCase().replace(/\s+/g, '-');
  const updatedBy = resource.sourceResource?.updatedBy ?? resource.targetResource?.updatedBy;
  const updatedAt = resource.sourceResource?.updatedAt ?? resource.targetResource?.updatedAt;

  return (
    <div className="border-stroke-soft-100 flex items-center gap-1 border-b p-1 last:border-b-0">
      <div className="flex size-5 items-center justify-center">
        <IconComponent className={`size-3.5 ${DEFAULT_ICON_COLOR}`} />
      </div>

      <div className="min-w-0 flex-1">
        <div className="text-label-xs text-text-strong truncate">{displayName}</div>
        <div className="text-paragraph-2xs text-text-soft font-mono tracking-tight">{identifier}</div>
      </div>

      <div className="text-right">
        <div className="text-paragraph-2xs text-text-soft font-medium">
          {updatedBy?.firstName && updatedBy?.lastName ? 'Last updated by' : 'Last updated'}
        </div>
        <div className="flex items-center gap-1">
          {updatedBy?.firstName && updatedBy?.lastName && (
            <>
              <span className="text-paragraph-2xs text-text-sub font-medium capitalize">{updatedBy?.firstName}</span>
              <div className="size-0.5 rounded-full bg-neutral-400" />
            </>
          )}
          <span className="text-paragraph-2xs text-text-sub font-medium">
            {updatedAt ? formatDateSimple(updatedAt) : 'Unknown'}
          </span>
        </div>
      </div>
    </div>
  );
}


### ANALISIS AUTOMATICO (ESPAÑOL) ###

import { RiLayout5Line, RiRouteFill, RiTranslate2 } from 'react-icons/ri';
import type { IResourceDiffResult } from '@/api/environments';
import { formatDateSimple } from '@/utils/format-date';
type ResourceRowProps = {
Contiene declaraciones 'import' (posible Python u otro).

### SUGERENCIAS PARA CREAR TU PROPIA VERSIÓN ###

- Añade un README describiendo qué hace este archivo.
- Si es parte de un proyecto, indica dependencia y punto de entrada.



################################################################################
Archivo: novu-next/apps/dashboard/src/components/show.tsx
Tamaño: 212 bytes
Lenguaje detectado: TSX

### CONTENIDO ORIGINAL ###

import { ReactNode } from 'react';

export const Show = ({ when, fallback, children }: { when: boolean; fallback?: ReactNode; children: ReactNode }) => {
  return when ? children : fallback ? fallback : null;
};


### ANALISIS AUTOMATICO (ESPAÑOL) ###

import { ReactNode } from 'react';
export const Show = ({ when, fallback, children }: { when: boolean; fallback?: ReactNode; children: ReactNode }) => {
return when ? children : fallback ? fallback : null;
};
Contiene declaraciones 'import' (posible Python u otro).

### SUGERENCIAS PARA CREAR TU PROPIA VERSIÓN ###

- Añade un README describiendo qué hace este archivo.
- Si es parte de un proyecto, indica dependencia y punto de entrada.



################################################################################
Archivo: novu-next/apps/dashboard/src/components/step-preview-hover-card.tsx
Tamaño: 2897 bytes
Lenguaje detectado: TSX

### CONTENIDO ORIGINAL ###

import {
  ChannelTypeEnum,
  ChatRenderOutput,
  GeneratePreviewResponseDto,
  InAppRenderOutput,
  PushRenderOutput,
  StepTypeEnum,
} from '@novu/shared';
import { Maily } from './maily/maily';
import { ChatPreview } from './workflow-editor/steps/chat/chat-preview';
import { EmailPreviewHeader, EmailPreviewSubject } from './workflow-editor/steps/email/email-preview';
import { InboxPreview } from './workflow-editor/steps/in-app/inbox-preview';
import { PushPreview } from './workflow-editor/steps/push/push-preview';
import { SmsPhone } from './workflow-editor/steps/sms/sms-phone';

export type StepType = StepTypeEnum;

interface StepPreviewProps {
  type: StepType;
  controlValues?: any;
}

export function StepPreview({ type, controlValues }: StepPreviewProps) {
  if (type === StepTypeEnum.TRIGGER || type === StepTypeEnum.DELAY || type === StepTypeEnum.DIGEST) {
    return null;
  }

  if (type === StepTypeEnum.IN_APP) {
    const { subject, body } = controlValues;

    return (
      <InboxPreview
        isPreviewPending={false}
        previewData={{
          result: {
            type: ChannelTypeEnum.IN_APP as const,
            preview: {
              subject,
              body,
            } as InAppRenderOutput,
          },
          previewPayloadExample: {},
        }}
      />
    );
  }

  if (type === StepTypeEnum.EMAIL) {
    const { subject, body } = controlValues;

    return (
      <div className="bg-background p-3">
        <EmailPreviewHeader />
        <EmailPreviewSubject className="px-3 py-2" subject={subject} />
        <div className="mx-auto w-full overflow-auto">
          <Maily value={body} translationValueInput={() => null} />
        </div>
      </div>
    );
  }

  if (type === StepTypeEnum.SMS) {
    const { body } = controlValues;

    return (
      <div className="p-4">
        <SmsPhone smsBody={body} />
      </div>
    );
  }

  if (type === StepTypeEnum.CHAT) {
    const { body } = controlValues;
    const previewData: GeneratePreviewResponseDto = {
      result: {
        type: ChannelTypeEnum.CHAT as const,
        preview: {
          body,
          content: body,
        } as ChatRenderOutput,
      },
      previewPayloadExample: {},
    };

    return (
      <div className="p-4">
        <ChatPreview isPreviewPending={false} previewData={previewData} />
      </div>
    );
  }

  if (type === StepTypeEnum.PUSH) {
    const { subject, body } = controlValues;
    const previewData: GeneratePreviewResponseDto = {
      result: {
        type: ChannelTypeEnum.PUSH as const,
        preview: {
          subject,
          body,
          title: subject,
          content: body,
        } as PushRenderOutput,
      },
      previewPayloadExample: {},
    };

    return (
      <div className="p-4">
        <PushPreview isPreviewPending={false} previewData={previewData} />
      </div>
    );
  }
}


### ANALISIS AUTOMATICO (ESPAÑOL) ###

import {
ChannelTypeEnum,
ChatRenderOutput,
GeneratePreviewResponseDto,
InAppRenderOutput,
Contiene declaraciones 'import' (posible Python u otro).

### SUGERENCIAS PARA CREAR TU PROPIA VERSIÓN ###

- Añade un README describiendo qué hace este archivo.
- Si es parte de un proyecto, indica dependencia y punto de entrada.



################################################################################
Archivo: novu-next/apps/dashboard/src/components/success-button-toast.tsx
Tamaño: 1323 bytes
Lenguaje detectado: TSX

### CONTENIDO ORIGINAL ###

import { ReactNode } from 'react';
import { RiArrowRightSLine } from 'react-icons/ri';
import { Button } from '@/components/primitives/button';
import { ToastClose, ToastIcon } from '@/components/primitives/sonner';

interface SuccessToastProps {
  title: string;
  description: ReactNode;
  actionLabel: string;
  onAction: () => void;
  onClose: () => void;
}

export function SuccessButtonToast({ title, description, actionLabel, onAction, onClose }: SuccessToastProps) {
  return (
    <>
      <ToastIcon variant="success" />
      <div className="flex flex-1 flex-col items-start gap-2.5">
        <div className="flex flex-col items-start justify-center gap-1 self-stretch">
          <div className="text-foreground-950 text-sm font-medium">{title}</div>
          <div className="text-foreground-600 text-sm">{description}</div>
        </div>
        <div className="flex items-center justify-end gap-2 self-stretch">
          <Button
            trailingIcon={RiArrowRightSLine}
            variant="secondary"
            mode="ghost"
            size="xs"
            className="text-destructive gap-1"
            onClick={onAction}
          >
            {actionLabel}
          </Button>
        </div>
      </div>
      <ToastClose className="absolute right-3 top-3" onClick={onClose} />
    </>
  );
}


### ANALISIS AUTOMATICO (ESPAÑOL) ###

import { ReactNode } from 'react';
import { RiArrowRightSLine } from 'react-icons/ri';
import { Button } from '@/components/primitives/button';
import { ToastClose, ToastIcon } from '@/components/primitives/sonner';
Contiene declaraciones 'import' (posible Python u otro).

### SUGERENCIAS PARA CREAR TU PROPIA VERSIÓN ###

- Añade un README describiendo qué hace este archivo.
- Si es parte de un proyecto, indica dependencia y punto de entrada.



################################################################################
Archivo: novu-next/apps/dashboard/src/components/time-display-hover-card.tsx
Tamaño: 2672 bytes
Lenguaje detectado: TSX

### CONTENIDO ORIGINAL ###

import { formatDistanceToNow } from 'date-fns';
import { HoverCard, HoverCardContent, HoverCardPortal, HoverCardTrigger } from '@/components/primitives/hover-card';
import { cn } from '@/utils/ui';

interface TimeDisplayHoverCardProps {
  date: Date | string | undefined;
  children?: React.ReactNode;
  className?: string;
}

const DATE_TIME_FORMAT_OPTIONS: Intl.DateTimeFormatOptions = Object.freeze({
  year: 'numeric',
  month: 'short',
  day: 'numeric',
  hour: '2-digit',
  minute: '2-digit',
  second: '2-digit',
});

const LOCAL_TIME_FORMATTER = new Intl.DateTimeFormat('default', DATE_TIME_FORMAT_OPTIONS);
const UTC_TIME_FORMATTER = new Intl.DateTimeFormat('default', {
  ...DATE_TIME_FORMAT_OPTIONS,
  timeZone: 'UTC',
});

export function TimeDisplayHoverCard({ date, children, className }: TimeDisplayHoverCardProps) {
  if (!date) {
    return <span className={className}>{children}</span>;
  }

  const dateObj = typeof date === 'string' ? new Date(date) : date;
  const utcTime = UTC_TIME_FORMATTER.format(dateObj);
  const localTime = LOCAL_TIME_FORMATTER.format(dateObj);
  const timeAgo = formatDistanceToNow(dateObj, { addSuffix: true });

  return (
    <HoverCard openDelay={100} closeDelay={100}>
      <HoverCardTrigger asChild className="hover:cursor-default">
        <span className={cn('relative z-10', className)}>{children}</span>
      </HoverCardTrigger>
      <HoverCardPortal>
        <HoverCardContent className="w-fit" align="end" sideOffset={4}>
          <div className="flex flex-col gap-2">
            <div className="text-muted-foreground text-2xs font-medium uppercase">Time Details</div>
            <div className="flex flex-col gap-2 text-xs capitalize">
              <div className="bg-muted/40 hover:bg-muted flex items-center justify-between gap-4 rounded-sm transition-colors">
                <span className="text-muted-foreground">UTC</span>
                <span className="font-medium">{utcTime}</span>
              </div>
              <div className="bg-muted/40 hover:bg-muted flex items-center justify-between gap-4 rounded-sm transition-colors">
                <span className="text-muted-foreground">Local</span>
                <span className="font-medium">{localTime}</span>
              </div>
              <div className="bg-muted/40 hover:bg-muted flex items-center justify-between gap-4 rounded-sm transition-colors">
                <span className="text-muted-foreground">Relative</span>
                <span className="font-medium normal-case">{timeAgo}</span>
              </div>
            </div>
          </div>
        </HoverCardContent>
      </HoverCardPortal>
    </HoverCard>
  );
}


### ANALISIS AUTOMATICO (ESPAÑOL) ###

import { formatDistanceToNow } from 'date-fns';
import { HoverCard, HoverCardContent, HoverCardPortal, HoverCardTrigger } from '@/components/primitives/hover-card';
import { cn } from '@/utils/ui';
interface TimeDisplayHoverCardProps {
Contiene declaraciones 'import' (posible Python u otro).

### SUGERENCIAS PARA CREAR TU PROPIA VERSIÓN ###

- Añade un README describiendo qué hace este archivo.
- Si es parte de un proyecto, indica dependencia y punto de entrada.



################################################################################
Archivo: novu-next/apps/dashboard/src/components/tree-view.tsx
Tamaño: 13238 bytes
Lenguaje detectado: TSX

### CONTENIDO ORIGINAL ###

import * as AccordionPrimitive from '@radix-ui/react-accordion';
import { cva } from 'class-variance-authority';
import { ChevronRight } from 'lucide-react';
import React from 'react';
import { cn } from '@/utils/ui';

const treeVariants = cva(
  'group hover:bg-neutral-alpha-50 flex items-center gap-1 px-2 py-1.5 rounded-md cursor-pointer transition-colors'
);

const selectedTreeVariants = cva('bg-neutral-alpha-100 text-text-strong');

const dragOverVariants = cva('bg-primary/20 text-primary-foreground');

interface TreeDataItem {
  id: string;
  name: string;
  icon?: any;
  selectedIcon?: any;
  openIcon?: any;
  children?: TreeDataItem[];
  actions?: React.ReactNode;
  onClick?: () => void;
  draggable?: boolean;
  droppable?: boolean;
  disabled?: boolean;
}

type TreeProps = React.HTMLAttributes<HTMLDivElement> & {
  data: TreeDataItem[] | TreeDataItem;
  initialSelectedItemId?: string;
  onSelectChange?: (item: TreeDataItem | undefined) => void;
  expandAll?: boolean;
  defaultNodeIcon?: any;
  defaultLeafIcon?: any;
  onDocumentDrag?: (sourceItem: TreeDataItem, targetItem: TreeDataItem) => void;
};

const TreeView = React.forwardRef<HTMLDivElement, TreeProps>(
  (
    {
      data,
      initialSelectedItemId,
      onSelectChange,
      expandAll,
      defaultLeafIcon,
      defaultNodeIcon,
      className,
      onDocumentDrag,
      ...props
    },
    ref
  ) => {
    const [selectedItemId, setSelectedItemId] = React.useState<string | undefined>(initialSelectedItemId);

    const [draggedItem, setDraggedItem] = React.useState<TreeDataItem | null>(null);

    const handleSelectChange = React.useCallback(
      (item: TreeDataItem | undefined) => {
        setSelectedItemId(item?.id);

        if (onSelectChange) {
          onSelectChange(item);
        }
      },
      [onSelectChange]
    );

    const handleDragStart = React.useCallback((item: TreeDataItem) => {
      setDraggedItem(item);
    }, []);

    const handleDrop = React.useCallback(
      (targetItem: TreeDataItem) => {
        if (draggedItem && onDocumentDrag && draggedItem.id !== targetItem.id) {
          onDocumentDrag(draggedItem, targetItem);
        }

        setDraggedItem(null);
      },
      [draggedItem, onDocumentDrag]
    );

    const expandedItemIds = React.useMemo(() => {
      if (!initialSelectedItemId) {
        return [] as string[];
      }

      const ids: string[] = [];

      function walkTreeItems(items: TreeDataItem[] | TreeDataItem, targetId: string) {
        if (items instanceof Array) {
          for (let i = 0; i < items.length; i++) {
            ids.push(items[i]!.id);

            if (walkTreeItems(items[i]!, targetId) && !expandAll) {
              return true;
            }

            if (!expandAll) ids.pop();
          }
        } else if (!expandAll && items.id === targetId) {
          return true;
        } else if (items.children) {
          return walkTreeItems(items.children, targetId);
        }
      }

      walkTreeItems(data, initialSelectedItemId);
      return ids;
    }, [data, expandAll, initialSelectedItemId]);

    return (
      <div className={cn('relative overflow-hidden p-2', className)}>
        <TreeItem
          data={data}
          ref={ref}
          selectedItemId={selectedItemId}
          handleSelectChange={handleSelectChange}
          expandedItemIds={expandedItemIds}
          defaultLeafIcon={defaultLeafIcon}
          defaultNodeIcon={defaultNodeIcon}
          handleDragStart={handleDragStart}
          handleDrop={handleDrop}
          draggedItem={draggedItem}
          {...props}
        />
        <div
          className="h-[48px] w-full"
          onDrop={(e) => {
            handleDrop({ id: '', name: 'parent_div' });
          }}
        ></div>
      </div>
    );
  }
);
TreeView.displayName = 'TreeView';

type TreeItemProps = TreeProps & {
  selectedItemId?: string;
  handleSelectChange: (item: TreeDataItem | undefined) => void;
  expandedItemIds: string[];
  defaultNodeIcon?: any;
  defaultLeafIcon?: any;
  handleDragStart?: (item: TreeDataItem) => void;
  handleDrop?: (item: TreeDataItem) => void;
  draggedItem: TreeDataItem | null;
};

const TreeItem = React.forwardRef<HTMLDivElement, TreeItemProps>(
  (
    {
      className,
      data,
      selectedItemId,
      handleSelectChange,
      expandedItemIds,
      defaultNodeIcon,
      defaultLeafIcon,
      handleDragStart,
      handleDrop,
      draggedItem,
      ...props
    },
    ref
  ) => {
    if (!(data instanceof Array)) {
      data = [data];
    }

    return (
      <div ref={ref} role="tree" className={className} {...props}>
        <ul>
          {data.map((item) => (
            <li key={item.id}>
              {item.children ? (
                <TreeNode
                  item={item}
                  selectedItemId={selectedItemId}
                  expandedItemIds={expandedItemIds}
                  handleSelectChange={handleSelectChange}
                  defaultNodeIcon={defaultNodeIcon}
                  defaultLeafIcon={defaultLeafIcon}
                  handleDragStart={handleDragStart}
                  handleDrop={handleDrop}
                  draggedItem={draggedItem}
                />
              ) : (
                <TreeLeaf
                  item={item}
                  selectedItemId={selectedItemId}
                  handleSelectChange={handleSelectChange}
                  defaultLeafIcon={defaultLeafIcon}
                  handleDragStart={handleDragStart}
                  handleDrop={handleDrop}
                  draggedItem={draggedItem}
                />
              )}
            </li>
          ))}
        </ul>
      </div>
    );
  }
);
TreeItem.displayName = 'TreeItem';

const TreeNode = ({
  item,
  handleSelectChange,
  expandedItemIds,
  selectedItemId,
  defaultNodeIcon,
  defaultLeafIcon,
  handleDragStart,
  handleDrop,
  draggedItem,
}: {
  item: TreeDataItem;
  handleSelectChange: (item: TreeDataItem | undefined) => void;
  expandedItemIds: string[];
  selectedItemId?: string;
  defaultNodeIcon?: any;
  defaultLeafIcon?: any;
  handleDragStart?: (item: TreeDataItem) => void;
  handleDrop?: (item: TreeDataItem) => void;
  draggedItem: TreeDataItem | null;
}) => {
  const [value, setValue] = React.useState(expandedItemIds.includes(item.id) ? [item.id] : []);
  const [isDragOver, setIsDragOver] = React.useState(false);

  const onDragStart = (e: React.DragEvent) => {
    if (!item.draggable) {
      e.preventDefault();
      return;
    }

    e.dataTransfer.setData('text/plain', item.id);
    handleDragStart?.(item);
  };

  const onDragOver = (e: React.DragEvent) => {
    if (item.droppable !== false && draggedItem && draggedItem.id !== item.id) {
      e.preventDefault();
      setIsDragOver(true);
    }
  };

  const onDragLeave = () => {
    setIsDragOver(false);
  };

  const onDrop = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(false);
    handleDrop?.(item);
  };

  return (
    <AccordionPrimitive.Root type="multiple" value={value} onValueChange={(s) => setValue(s)}>
      <AccordionPrimitive.Item value={item.id}>
        <AccordionTrigger
          className={cn(
            treeVariants(),
            selectedItemId === item.id && selectedTreeVariants(),
            isDragOver && dragOverVariants()
          )}
          onClick={() => {
            handleSelectChange(item);
            item.onClick?.();
          }}
          draggable={!!item.draggable}
          onDragStart={onDragStart}
          onDragOver={onDragOver}
          onDragLeave={onDragLeave}
          onDrop={onDrop}
        >
          <div className="flex items-center gap-2">
            <TreeIcon
              item={item}
              isSelected={selectedItemId === item.id}
              isOpen={value.includes(item.id)}
              default={defaultNodeIcon}
            />
            <span className="text-label-sm text-text-strong">{item.name}</span>
          </div>
          <TreeActions isSelected={selectedItemId === item.id}>{item.actions}</TreeActions>
        </AccordionTrigger>
        <AccordionContent className="ml-5">
          <TreeItem
            data={item.children ? item.children : item}
            selectedItemId={selectedItemId}
            handleSelectChange={handleSelectChange}
            expandedItemIds={expandedItemIds}
            defaultLeafIcon={defaultLeafIcon}
            defaultNodeIcon={defaultNodeIcon}
            handleDragStart={handleDragStart}
            handleDrop={handleDrop}
            draggedItem={draggedItem}
          />
        </AccordionContent>
      </AccordionPrimitive.Item>
    </AccordionPrimitive.Root>
  );
};

const TreeLeaf = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & {
    item: TreeDataItem;
    selectedItemId?: string;
    handleSelectChange: (item: TreeDataItem | undefined) => void;
    defaultLeafIcon?: any;
    handleDragStart?: (item: TreeDataItem) => void;
    handleDrop?: (item: TreeDataItem) => void;
    draggedItem: TreeDataItem | null;
  }
>(
  (
    {
      className,
      item,
      selectedItemId,
      handleSelectChange,
      defaultLeafIcon,
      handleDragStart,
      handleDrop,
      draggedItem,
      ...props
    },
    ref
  ) => {
    const [isDragOver, setIsDragOver] = React.useState(false);

    const onDragStart = (e: React.DragEvent) => {
      if (!item.draggable || item.disabled) {
        e.preventDefault();
        return;
      }

      e.dataTransfer.setData('text/plain', item.id);
      handleDragStart?.(item);
    };

    const onDragOver = (e: React.DragEvent) => {
      if (item.droppable !== false && !item.disabled && draggedItem && draggedItem.id !== item.id) {
        e.preventDefault();
        setIsDragOver(true);
      }
    };

    const onDragLeave = () => {
      setIsDragOver(false);
    };

    const onDrop = (e: React.DragEvent) => {
      if (item.disabled) return;
      e.preventDefault();
      setIsDragOver(false);
      handleDrop?.(item);
    };

    return (
      <div
        ref={ref}
        className={cn(
          'ml-10 flex cursor-pointer items-center text-left',
          treeVariants(),
          className,
          selectedItemId === item.id && selectedTreeVariants(),
          isDragOver && dragOverVariants(),
          item.disabled && 'pointer-events-none cursor-not-allowed opacity-50'
        )}
        onClick={() => {
          if (item.disabled) return;
          handleSelectChange(item);
          item.onClick?.();
        }}
        draggable={!!item.draggable && !item.disabled}
        onDragStart={onDragStart}
        onDragOver={onDragOver}
        onDragLeave={onDragLeave}
        onDrop={onDrop}
        {...props}
      >
        <div className="flex items-center gap-2">
          <div className="h-4 w-4" />
          <TreeIcon item={item} isSelected={selectedItemId === item.id} default={defaultLeafIcon} />
          <span className="text-label-sm text-text-sub">{item.name}</span>
        </div>
        <TreeActions isSelected={selectedItemId === item.id && !item.disabled}>{item.actions}</TreeActions>
      </div>
    );
  }
);
TreeLeaf.displayName = 'TreeLeaf';

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header>
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn('flex w-full flex-1 items-center transition-all', className)}
      {...props}
    >
      {children}
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
));
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName;

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className={cn(
      'data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down overflow-hidden text-sm transition-all',
      className
    )}
    {...props}
  >
    <div className="pb-1 pt-0">{children}</div>
  </AccordionPrimitive.Content>
));
AccordionContent.displayName = AccordionPrimitive.Content.displayName;

const TreeIcon = ({
  item,
  isOpen,
  isSelected,
  default: defaultIcon,
}: {
  item: TreeDataItem;
  isOpen?: boolean;
  isSelected?: boolean;
  default?: any;
}) => {
  // For nodes with children, show chevron based on open state
  if (item.children && item.children.length > 0) {
    if (isOpen && item.openIcon) {
      return item.openIcon;
    } else if (!isOpen && item.selectedIcon) {
      return item.selectedIcon;
    }
  }

  // For leaf nodes or when no specific icon is provided
  if (item.icon) {
    return item.icon;
  }

  return defaultIcon || null;
};

const TreeActions = ({ children, isSelected }: { children: React.ReactNode; isSelected: boolean }) => {
  return <div className={cn(isSelected ? 'block' : 'hidden', 'absolute right-3 group-hover:block')}>{children}</div>;
};

export { TreeView, type TreeDataItem };


### ANALISIS AUTOMATICO (ESPAÑOL) ###

import * as AccordionPrimitive from '@radix-ui/react-accordion';
import { cva } from 'class-variance-authority';
import { ChevronRight } from 'lucide-react';
import React from 'react';
import { cn } from '@/utils/ui';
Contiene declaraciones 'import' (posible Python u otro).

### SUGERENCIAS PARA CREAR TU PROPIA VERSIÓN ###

- Añade un README describiendo qué hace este archivo.
- Si es parte de un proyecto, indica dependencia y punto de entrada.



################################################################################
Archivo: novu-next/apps/dashboard/src/components/truncated-text.tsx
Tamaño: 1851 bytes
Lenguaje detectado: TSX

### CONTENIDO ORIGINAL ###

import { Slot, SlotProps } from '@radix-ui/react-slot';
import { useCallback, useLayoutEffect, useRef, useState } from 'react';
import { Tooltip, TooltipContent, TooltipTrigger } from '@/components/primitives/tooltip';
import { cn } from '@/utils/ui';

type TruncatedTextProps = SlotProps & { asChild?: boolean };

export default function TruncatedText(props: TruncatedTextProps) {
  const { className, children, asChild, ...rest } = props;
  const [isTruncated, setIsTruncated] = useState(false);
  const textRef = useRef<HTMLDivElement>(null);

  const checkTruncation = useCallback(() => {
    if (textRef.current) {
      const { scrollWidth, clientWidth } = textRef.current;
      setIsTruncated(scrollWidth > clientWidth);
    }
  }, []);

  useLayoutEffect(() => {
    const observer = new MutationObserver(checkTruncation);
    if (textRef.current) observer.observe(textRef.current, { childList: true, subtree: true });

    checkTruncation();
    window.addEventListener('resize', checkTruncation);

    return () => {
      observer.disconnect();
      window.removeEventListener('resize', checkTruncation);
    };
  }, [checkTruncation, children]);

  return (
    <Tooltip>
      <TooltipTrigger asChild>
        {asChild ? (
          <Slot
            ref={textRef}
            className={cn('truncate', { block: isTruncated, 'inline-flex': !isTruncated }, className)}
            {...rest}
          >
            {children}
          </Slot>
        ) : (
          <span
            ref={textRef}
            className={cn('truncate', { block: isTruncated, 'inline-flex': !isTruncated }, className)}
            {...rest}
          >
            {children}
          </span>
        )}
      </TooltipTrigger>
      {isTruncated && <TooltipContent style={{ wordBreak: 'break-all' }}>{children}</TooltipContent>}
    </Tooltip>
  );
}


### ANALISIS AUTOMATICO (ESPAÑOL) ###

import { Slot, SlotProps } from '@radix-ui/react-slot';
import { useCallback, useLayoutEffect, useRef, useState } from 'react';
import { Tooltip, TooltipContent, TooltipTrigger } from '@/components/primitives/tooltip';
import { cn } from '@/utils/ui';
Contiene declaraciones 'import' (posible Python u otro).

### SUGERENCIAS PARA CREAR TU PROPIA VERSIÓN ###

- Añade un README describiendo qué hace este archivo.
- Si es parte de un proyecto, indica dependencia y punto de entrada.



################################################################################
Archivo: novu-next/apps/dashboard/src/components/unsaved-changes-alert-dialog.tsx
Tamaño: 1629 bytes
Lenguaje detectado: TSX

### CONTENIDO ORIGINAL ###

import { RiAlertFill } from 'react-icons/ri';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/primitives/alert-dialog';
import { Separator } from '@/components/primitives/separator';
import { Button } from './primitives/button';

type UnsavedChangesAlertDialogProps = {
  show?: boolean;
  description?: string;
  onCancel?: () => void;
  onProceed?: () => void;
};

export const UnsavedChangesAlertDialog = (props: UnsavedChangesAlertDialogProps) => {
  const { show, description, onCancel, onProceed } = props;

  return (
    <AlertDialog open={show}>
      <AlertDialogContent>
        <AlertDialogHeader className="flex flex-row items-start gap-4">
          <div className="bg-warning/10 rounded-lg p-3">
            <RiAlertFill className="text-warning size-6" />
          </div>
          <div className="space-y-1">
            <AlertDialogTitle>You might lose your progress</AlertDialogTitle>
            <AlertDialogDescription>
              {description || 'This form has some unsaved changes. Save progress before you leave.'}
            </AlertDialogDescription>
          </div>
        </AlertDialogHeader>

        <Separator />

        <AlertDialogFooter>
          <AlertDialogCancel onClick={onProceed} asChild>
            <Button size="xs">Proceed anyway</Button>
          </AlertDialogCancel>
          <AlertDialogAction onClick={onCancel}>Cancel</AlertDialogAction>
        </AlertDialogFooter>
      </AlertDialogContent>
    </AlertDialog>
  );
};


### ANALISIS AUTOMATICO (ESPAÑOL) ###

import { RiAlertFill } from 'react-icons/ri';
import {
AlertDialog,
AlertDialogAction,
AlertDialogCancel,
Contiene declaraciones 'import' (posible Python u otro).

### SUGERENCIAS PARA CREAR TU PROPIA VERSIÓN ###

- Añade un README describiendo qué hace este archivo.
- Si es parte de un proyecto, indica dependencia y punto de entrada.



################################################################################
Archivo: novu-next/apps/dashboard/src/components/updated-ago.tsx
Tamaño: 2410 bytes
Lenguaje detectado: TSX

### CONTENIDO ORIGINAL ###

import { motion } from 'motion/react';
import { useEffect, useMemo, useState } from 'react';
import { RiLoopRightLine, RiRefreshLine, RiRepeatOneLine } from 'react-icons/ri';

type UpdatedAgoProps = {
  lastUpdated: Date;
  onRefresh: () => Promise<void>;
};

export function UpdatedAgo({ lastUpdated, onRefresh }: UpdatedAgoProps) {
  const [currentTime, setCurrentTime] = useState(new Date());
  const [isRefreshing, setIsRefreshing] = useState(false);

  // Update current time every 5 seconds
  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentTime(new Date());
    }, 5000);

    return () => clearInterval(interval);
  }, []);

  const timeAgo = useMemo(() => {
    const diffInSeconds = Math.floor((currentTime.getTime() - lastUpdated.getTime()) / 1000);

    if (diffInSeconds < 5) {
      return 'just now';
    } else if (diffInSeconds < 60) {
      // Round to nearest 5 seconds
      const roundedSeconds = Math.round(diffInSeconds / 5) * 5;
      return `${roundedSeconds} seconds ago`;
    } else if (diffInSeconds < 3600) {
      const minutes = Math.floor(diffInSeconds / 60);
      return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;
    } else {
      const hours = Math.floor(diffInSeconds / 3600);
      return `${hours} hour${hours > 1 ? 's' : ''} ago`;
    }
  }, [lastUpdated, currentTime]);

  return (
    <div className="flex items-center gap-1.5">
      <div className="text-xs font-medium leading-4">
        <span className="text-foreground-400">Updated </span>
        <span className="text-foreground-600">{timeAgo}</span>
      </div>
      <button
        onClick={async () => {
          setIsRefreshing(true);
          await onRefresh();
          setIsRefreshing(false);
        }}
        disabled={isRefreshing}
        className="flex items-center justify-center rounded-md bg-white p-1 transition-shadow hover:shadow-md disabled:opacity-50"
        title="Refresh data"
      >
        <div className="flex h-3.5 w-3.5 items-center justify-center p-0.5">
          <motion.div
            animate={isRefreshing ? { rotate: 360 } : { rotate: 0 }}
            transition={{
              duration: 1,
              repeat: isRefreshing ? Infinity : 0,
              ease: 'linear',
            }}
          >
            <RiLoopRightLine className="h-full w-full" />
          </motion.div>
        </div>
      </button>
    </div>
  );
}


### ANALISIS AUTOMATICO (ESPAÑOL) ###

import { motion } from 'motion/react';
import { useEffect, useMemo, useState } from 'react';
import { RiLoopRightLine, RiRefreshLine, RiRepeatOneLine } from 'react-icons/ri';
type UpdatedAgoProps = {
// Update current time every 5 seconds
Contiene declaraciones 'import' (posible Python u otro).

### SUGERENCIAS PARA CREAR TU PROPIA VERSIÓN ###

- Añade un README describiendo qué hace este archivo.
- Si es parte de un proyecto, indica dependencia y punto de entrada.



################################################################################
Archivo: novu-next/apps/dashboard/src/components/upgrade-cta-tooltip.tsx
Tamaño: 2908 bytes
Lenguaje detectado: TSX

### CONTENIDO ORIGINAL ###

import { ReactNode } from 'react';
import { RiExternalLinkLine, RiLockStarLine } from 'react-icons/ri';
import { useNavigate } from 'react-router-dom';
import { Tooltip, TooltipContent, TooltipTrigger } from '@/components/primitives/tooltip';
import { IS_SELF_HOSTED, SELF_HOSTED_UPGRADE_REDIRECT_URL } from '@/config';
import { ROUTES } from '@/utils/routes';
import { openInNewTab } from '@/utils/url';

type UpgradeCTATooltipProps = {
  children: ReactNode;
  title?: string;
  description?: string;
  side?: 'top' | 'right' | 'bottom' | 'left';
  align?: 'start' | 'center' | 'end';
  sideOffset?: number;
  utmCampaign?: string;
  utmSource?: string;
};

export function UpgradeCTATooltip({
  children,
  description,
  side = 'bottom',
  align = 'end',
  sideOffset = 4,
  utmCampaign = 'upgrade_prompt',
  utmSource = 'upgrade_prompt',
}: UpgradeCTATooltipProps) {
  const navigate = useNavigate();

  const defaultDescription = IS_SELF_HOSTED
    ? 'Unlock this feature by upgrading to Cloud plans'
    : 'Unlock this feature by upgrading to a paid plan';

  const finalDescription = description || defaultDescription;

  const handleUpgradeClick = () => {
    if (IS_SELF_HOSTED) {
      openInNewTab(`${SELF_HOSTED_UPGRADE_REDIRECT_URL}?utm_campaign=${utmCampaign}`);
    } else {
      navigate(`${ROUTES.SETTINGS_BILLING}?utm_source=${utmSource}`);
    }
  };

  return (
    <Tooltip>
      <TooltipTrigger type="button">{children}</TooltipTrigger>
      <TooltipContent
        side={side}
        align={align}
        sideOffset={sideOffset}
        variant="light"
        size="lg"
        className="flex w-72 flex-col items-start gap-3 border border-neutral-100 p-2 shadow-md"
      >
        {/* Badge */}
        <div className="flex items-center gap-1 rounded bg-red-50 px-2 py-1">
          <RiLockStarLine className="h-3 w-3 text-pink-600" />
          <span
            className="text-[10px] font-medium uppercase leading-normal"
            style={{
              background: 'linear-gradient(225deg, #FF884D 23.17%, #E300BD 80.17%)',
              WebkitBackgroundClip: 'text',
              WebkitTextFillColor: 'transparent',
              backgroundClip: 'text',
            }}
          >
            PREMIUM FEATURE
          </span>
        </div>

        {/* Label */}
        <div className="flex flex-col items-start gap-3">
          <p className="text-xs text-neutral-500">{finalDescription}</p>
          <div className="flex w-full">
            <button
              onClick={(e) => {
                e.stopPropagation();
                handleUpgradeClick();
              }}
              className="flex items-center gap-1 text-xs font-medium text-neutral-900 hover:underline"
            >
              Upgrade plan <RiExternalLinkLine className="h-3 w-3" />
            </button>
          </div>
        </div>
      </TooltipContent>
    </Tooltip>
  );
}


### ANALISIS AUTOMATICO (ESPAÑOL) ###

import { ReactNode } from 'react';
import { RiExternalLinkLine, RiLockStarLine } from 'react-icons/ri';
import { useNavigate } from 'react-router-dom';
import { Tooltip, TooltipContent, TooltipTrigger } from '@/components/primitives/tooltip';
import { IS_SELF_HOSTED, SELF_HOSTED_UPGRADE_REDIRECT_URL } from '@/config';
Contiene declaraciones 'import' (posible Python u otro).

### SUGERENCIAS PARA CREAR TU PROPIA VERSIÓN ###

- Añade un README describiendo qué hace este archivo.
- Si es parte de un proyecto, indica dependencia y punto de entrada.



################################################################################
Archivo: novu-next/apps/dashboard/src/components/usecase-playground-header.tsx
Tamaño: 3110 bytes
Lenguaje detectado: TSX

### CONTENIDO ORIGINAL ###

import { RiArrowLeftSLine } from 'react-icons/ri';
import { useNavigate } from 'react-router-dom';
import { Stepper } from './onboarding/stepper';
import { CompactButton } from './primitives/button-compact';
import { LinkButton } from './primitives/button-link';

interface UsecasePlaygroundHeaderProps {
  title: string;
  description: string;
  skipPath?: string;
  skipLabel?: string;
  onSkip?: () => void;
  showSkipButton?: boolean;
  showBackButton?: boolean;
  showStepper?: boolean;
  currentStep?: number;
  totalSteps?: number;
}

export function UsecasePlaygroundHeader({
  title,
  description,
  skipPath,
  skipLabel,
  onSkip,
  showSkipButton = false,
  showBackButton = true,
  showStepper = true,
  currentStep = 1,
  totalSteps = 1,
}: UsecasePlaygroundHeaderProps) {
  const navigate = useNavigate();

  const handleSkip = () => {
    onSkip?.();

    if (skipPath) {
      navigate(skipPath);
    }
  };

  // Determine the skip button text
  const getSkipButtonText = () => {
    if (!skipPath) return null;
    return skipLabel || 'Skip, I’ll explore myself';
  };

  const skipButtonText = getSkipButtonText();

  return (
    <div className="flex items-center justify-between gap-4 border-b pr-6">
      <div className="flex pl-3">
        {showBackButton && (
          <CompactButton
            icon={RiArrowLeftSLine}
            variant="ghost"
            className="mt-[16px] h-5 w-5"
            onClick={() => navigate(-1)}
          />
        )}

        <div className="flex-1 py-3 pr-3 pt-3">
          <h2 className="text-lg font-medium">{title}</h2>
          <p className="text-foreground-400 pb-1.5 text-sm">{description}</p>
        </div>
      </div>

      {showSkipButton ? (
        <div className="flex h-7 flex-col items-end gap-2">
          {showStepper && (
            <div className="flex h-1 w-[100px] gap-1">
              {Array.from({ length: totalSteps }, (_, index) => (
                <div
                  key={index}
                  className={`h-1 flex-1 rounded-full ${
                    index < currentStep ? 'bg-foreground-950' : 'bg-foreground-950/10'
                  }`}
                />
              ))}
            </div>
          )}

          <div className="flex h-4 items-center gap-2">
            {skipButtonText && (
              <LinkButton
                variant="gray"
                size="sm"
                onClick={handleSkip}
                className="text-foreground-600 h-4 !text-xs !font-medium !leading-4 !no-underline hover:!no-underline focus:!no-underline"
              >
                {skipButtonText}
              </LinkButton>
            )}
            {skipButtonText && <span className="text-foreground-400">•</span>}
            <span className="text-foreground-600 text-xs font-medium leading-4">
              {currentStep}/{totalSteps}
            </span>
          </div>
        </div>
      ) : (
        <div className="flex items-center gap-4">
          {showStepper && <Stepper currentStep={currentStep} totalSteps={totalSteps} />}
        </div>
      )}
    </div>
  );
}


### ANALISIS AUTOMATICO (ESPAÑOL) ###

import { RiArrowLeftSLine } from 'react-icons/ri';
import { useNavigate } from 'react-router-dom';
import { Stepper } from './onboarding/stepper';
import { CompactButton } from './primitives/button-compact';
import { LinkButton } from './primitives/button-link';
Contiene declaraciones 'import' (posible Python u otro).

### SUGERENCIAS PARA CREAR TU PROPIA VERSIÓN ###

- Añade un README describiendo qué hace este archivo.
- Si es parte de un proyecto, indica dependencia y punto de entrada.



################################################################################
Archivo: novu-next/apps/dashboard/src/components/user-profile.tsx
Tamaño: 1025 bytes
Lenguaje detectado: TSX

### CONTENIDO ORIGINAL ###

import { UserButton, useOrganization } from '@clerk/clerk-react';
import { RiSignpostFill } from 'react-icons/ri';
import { useNewDashboardOptIn } from '@/hooks/use-new-dashboard-opt-in';
import { ROUTES } from '../utils/routes';

export function UserProfile() {
  const { organization } = useOrganization();
  const { optOut } = useNewDashboardOptIn();

  return (
    <UserButton
      userProfileUrl={ROUTES.SETTINGS_ACCOUNT}
      appearance={{
        elements: {
          avatarBox: 'h-6 w-6',
          userButtonTrigger: 'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring',
        },
      }}
    >
      {organization && organization.createdAt < new Date('2024-12-24') && (
        <UserButton.MenuItems>
          <UserButton.Action
            label="Go back to legacy V0 Dashboard"
            labelIcon={<RiSignpostFill size="16" color="var(--nv-colors-typography-text-main)" />}
            onClick={optOut}
          />
        </UserButton.MenuItems>
      )}
    </UserButton>
  );
}


### ANALISIS AUTOMATICO (ESPAÑOL) ###

import { UserButton, useOrganization } from '@clerk/clerk-react';
import { RiSignpostFill } from 'react-icons/ri';
import { useNewDashboardOptIn } from '@/hooks/use-new-dashboard-opt-in';
import { ROUTES } from '../utils/routes';
Contiene declaraciones 'import' (posible Python u otro).

### SUGERENCIAS PARA CREAR TU PROPIA VERSIÓN ###

- Añade un README describiendo qué hace este archivo.
- Si es parte de un proyecto, indica dependencia y punto de entrada.



################################################################################
Archivo: novu-next/apps/dashboard/src/components/vercel-integration-form.tsx
Tamaño: 5888 bytes
Lenguaje detectado: TSX

### CONTENIDO ORIGINAL ###

import { useState } from 'react';
import { useFieldArray, useForm } from 'react-hook-form';
import { RiAddLine } from 'react-icons/ri';

import type { GetVercelConfigurationDetails } from '@/api/partner-integrations';
import { Button } from '@/components/primitives/button';
import { Form, FormRoot } from '@/components/primitives/form/form';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/primitives/select';
import { useUpdateVercelIntegration } from '@/hooks/use-update-vercel-integration';
import { Delete } from './icons/delete';
import { MultiSelect } from './primitives/multi-select';

export type ProjectLinkFormValues = {
  projectLinkState: GetVercelConfigurationDetails[];
};

type Option = {
  value: string;
  label: string;
};

export const VercelIntegrationForm = ({
  vercelIntegrationDetails,
  organizations,
  projects,
  configurationId,
  next,
  currentOrganizationId,
}: {
  vercelIntegrationDetails?: GetVercelConfigurationDetails[];
  organizations: Option[];
  projects: Option[];
  configurationId: string | null;
  next: string | null;
  currentOrganizationId: string;
}) => {
  const [projectRowCount, setProjectRowCount] = useState(1);
  const form = useForm<ProjectLinkFormValues>({
    defaultValues: {
      projectLinkState: vercelIntegrationDetails ?? [
        {
          projectIds: [],
          organizationId: currentOrganizationId,
        },
      ],
    },
  });
  const { fields, append, remove, update } = useFieldArray({
    control: form.control,
    name: 'projectLinkState',
  });

  const { mutate: updateVercelIntegration, isPending: isUpdateVercelIntegrationPending } = useUpdateVercelIntegration({
    next,
  });

  const onSubmit = (data: ProjectLinkFormValues) => {
    const payload = data.projectLinkState.reduce<Record<string, string[]>>((prev, curr) => {
      const { organizationId, projectIds } = curr;
      prev[organizationId] = projectIds;

      return prev;
    }, {});

    if (configurationId) {
      updateVercelIntegration({
        data: payload,
        configurationId,
      });
    }
  };

  const addRow = () => {
    setProjectRowCount((prev) => prev + 1);
    append({
      organizationId: '',
      projectIds: [],
    });
  };

  const removeRow = (rowIndex: number) => {
    remove(rowIndex);
    setProjectRowCount((prev) => prev - 1);
  };

  const updateRow = (rowIndex: number, value: GetVercelConfigurationDetails) => {
    update(rowIndex, value);
  };

  const isDisabledLinkMore = projectRowCount >= organizations.length || !!fields.find((el) => el.organizationId === '');

  return (
    <Form {...form}>
      <FormRoot
        autoComplete="off"
        noValidate
        onSubmit={form.handleSubmit(onSubmit)}
        className="flex flex-col"
        id="link-vercel-projects"
      >
        <div className="flex flex-col gap-4">
          {fields.map((row, index) => {
            const rowOrg = organizations.find((el) => row.organizationId === el.value);

            return (
              <div
                key={row.organizationId}
                className="grid grid-cols-[minmax(276px,1fr)_max-content_minmax(276px,1fr)_max-content] items-center gap-4"
              >
                <Select
                  value={row.organizationId}
                  onValueChange={(value) =>
                    updateRow(index, {
                      organizationId: value,
                      projectIds: row.projectIds,
                    })
                  }
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select organization" />
                  </SelectTrigger>
                  <SelectContent>
                    {rowOrg && (
                      <SelectItem key={rowOrg.value} value={rowOrg.value}>
                        {rowOrg.label}
                      </SelectItem>
                    )}
                    {organizations
                      .filter((org) => !fields.some((field) => field.organizationId === org.value))
                      .map((org) => (
                        <SelectItem key={org.value} value={org.value}>
                          {org.label}
                        </SelectItem>
                      ))}
                  </SelectContent>
                </Select>
                <span className="text-foreground-500 text-xs font-normal">links to</span>
                <MultiSelect
                  values={row.projectIds}
                  options={projects}
                  placeholder="Select projects"
                  onValuesChange={(value) =>
                    updateRow(index, {
                      organizationId: row.organizationId,
                      projectIds: value,
                    })
                  }
                />
                <Button
                  type="button"
                  variant="secondary"
                  mode="ghost"
                  onClick={() => removeRow(index)}
                  className="shrink-0"
                  aria-label="Remove row"
                >
                  <Delete className="text-muted-foreground h-4 w-4" />
                </Button>
              </div>
            );
          })}
          <Button
            variant="secondary"
            mode="outline"
            onClick={addRow}
            className="flex items-center gap-2 self-start"
            disabled={isDisabledLinkMore}
          >
            <RiAddLine className="h-4 w-4" />
            {fields.length === 0 ? 'Link Organization' : 'Link Another Organization'}
          </Button>
        </div>
        <Button
          type="submit"
          className="ml-auto"
          isLoading={isUpdateVercelIntegrationPending}
          disabled={isUpdateVercelIntegrationPending}
        >
          Create Links
        </Button>
      </FormRoot>
    </Form>
  );
};


### ANALISIS AUTOMATICO (ESPAÑOL) ###

import { useState } from 'react';
import { useFieldArray, useForm } from 'react-hook-form';
import { RiAddLine } from 'react-icons/ri';
import type { GetVercelConfigurationDetails } from '@/api/partner-integrations';
Contiene declaraciones 'import' (posible Python u otro).

### SUGERENCIAS PARA CREAR TU PROPIA VERSIÓN ###

- Añade un README describiendo qué hace este archivo.
- Si es parte de un proyecto, indica dependencia y punto de entrada.



################################################################################
Archivo: novu-next/apps/dashboard/src/components/workflow-issues-popover.tsx
Tamaño: 3779 bytes
Lenguaje detectado: TSX

### CONTENIDO ORIGINAL ###

import { PropsWithChildren, useState } from 'react';
import { RiErrorWarningFill } from 'react-icons/ri';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/primitives/popover';
import { Separator } from '@/components/primitives/separator';
import TruncatedText from '@/components/truncated-text';
import { countIssues, getAllStepIssues } from '@/components/workflow-editor/step-utils';

// Local type definition for step issues until the shared types are updated
type RuntimeIssue = {
  message: string;
  variableName?: string;
  issueType: string;
};

type StepIssue = {
  controls?: Record<string, RuntimeIssue[]>;
  integration?: Record<string, RuntimeIssue[]>;
};

type StepListItem = {
  slug: string;
  type: string;
  issues?: StepIssue;
};

type WorkflowIssuesPopoverProps = PropsWithChildren<{
  steps: StepListItem[];
  className?: string;
}>;

export const WorkflowIssuesPopover = ({ children, steps, className }: WorkflowIssuesPopoverProps) => {
  const [isOpen, setIsOpen] = useState(false);
  const [hoverTimeout, setHoverTimeout] = useState<NodeJS.Timeout | null>(null);
  const stepsWithIssues = steps.filter((step) => step.issues && countIssues(step.issues as any) > 0);

  if (stepsWithIssues.length === 0) {
    return <>{children}</>;
  }

  const totalIssues = stepsWithIssues.reduce((acc, step) => acc + countIssues(step.issues as any), 0);

  const handleMouseEnter = () => {
    if (hoverTimeout) {
      clearTimeout(hoverTimeout);
    }
    const timeout = setTimeout(() => {
      setIsOpen(true);
    }, 150); // 300ms delay
    setHoverTimeout(timeout);
  };

  const handleMouseLeave = () => {
    if (hoverTimeout) {
      clearTimeout(hoverTimeout);
      setHoverTimeout(null);
    }
    setIsOpen(false);
  };

  return (
    <Popover open={isOpen} onOpenChange={setIsOpen}>
      <PopoverTrigger className={className} onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave} asChild>
        {children}
      </PopoverTrigger>
      <PopoverContent
        className="w-80 p-0"
        align="start"
        onMouseEnter={() => setIsOpen(true)}
        onMouseLeave={handleMouseLeave}
      >
        <div className="p-3">
          <div className="flex items-center gap-2 mb-2">
            <RiErrorWarningFill className="text-destructive size-3.5" />
            <span className="font-medium text-xs">
              {totalIssues} issue{totalIssues !== 1 ? 's' : ''} in {stepsWithIssues.length} step
              {stepsWithIssues.length !== 1 ? 's' : ''}
            </span>
          </div>
          <div className="space-y-1">
            {stepsWithIssues.map((step, index) => (
              <div key={step.slug}>
                <StepIssueItem step={step} />
                {index < stepsWithIssues.length - 1 && <Separator className="my-2" />}
              </div>
            ))}
          </div>
        </div>
      </PopoverContent>
    </Popover>
  );
};

type StepIssueItemProps = {
  step: StepListItem;
};

const StepIssueItem = ({ step }: StepIssueItemProps) => {
  const allIssues = getAllStepIssues(step.issues as any);

  return (
    <div className="space-y-1.5">
      <span className="text-xs font-medium capitalize text-foreground-700">{step.type.replace('_', ' ')} Step</span>
      <div className="space-y-1">
        {allIssues.slice(0, 3).map((issue, index) => (
          <div key={index} className="flex items-start gap-1.5">
            <span className="h-1 w-1 rounded-full bg-destructive mt-1.5 shrink-0" />
            <div className="text-xs text-foreground-600 leading-snug">{issue.message}</div>
          </div>
        ))}
        {allIssues.length > 3 && <div className="text-xs text-foreground-400 pl-2.5">+{allIssues.length - 3} more</div>}
      </div>
    </div>
  );
};


### ANALISIS AUTOMATICO (ESPAÑOL) ###

import { PropsWithChildren, useState } from 'react';
import { RiErrorWarningFill } from 'react-icons/ri';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/primitives/popover';
import { Separator } from '@/components/primitives/separator';
import TruncatedText from '@/components/truncated-text';
// Local type definition for step issues until the shared types are updated
Contiene declaraciones 'import' (posible Python u otro).

### SUGERENCIAS PARA CREAR TU PROPIA VERSIÓN ###

- Añade un README describiendo qué hace este archivo.
- Si es parte de un proyecto, indica dependencia y punto de entrada.



################################################################################
Archivo: novu-next/apps/dashboard/src/components/workflow-list-empty.tsx
Tamaño: 3895 bytes
Lenguaje detectado: TSX

### CONTENIDO ORIGINAL ###

import { PermissionsEnum } from '@novu/shared';
import { RiBookMarkedLine, RiRouteFill } from 'react-icons/ri';
import { Link, useNavigate, useParams } from 'react-router-dom';
import { VersionControlDev } from '@/components/icons/version-control-dev';
import { VersionControlProd } from '@/components/icons/version-control-prod';
import { Button } from '@/components/primitives/button';
import { PermissionButton } from '@/components/primitives/permission-button';
import { useEnvironment } from '@/context/environment/hooks';
import { buildRoute, ROUTES } from '../utils/routes';
import { ListNoResults } from './list-no-results';
import { LinkButton } from './primitives/button-link';

interface WorkflowListEmptyProps {
  emptySearchResults?: boolean;
  onClearFilters?: () => void;
}

export const WorkflowListEmpty = ({ emptySearchResults, onClearFilters }: WorkflowListEmptyProps) => {
  const { currentEnvironment, switchEnvironment, oppositeEnvironment } = useEnvironment();

  if (emptySearchResults) {
    return (
      <ListNoResults
        title="No workflows found"
        description="We couldn't find any workflows that match your search criteria. Try adjusting your filters or create a new workflow."
        onClearFilters={onClearFilters}
      />
    );
  }

  const isProd = currentEnvironment?.name === 'Production';

  return isProd ? (
    <WorkflowListEmptyProd switchToDev={() => switchEnvironment(oppositeEnvironment?.slug)} />
  ) : (
    <WorkflowListEmptyDev />
  );
};

const WorkflowListEmptyProd = ({ switchToDev }: { switchToDev: () => void }) => (
  <div className="flex h-full w-full flex-col items-center justify-center gap-6">
    <VersionControlProd />
    <div className="flex flex-col items-center gap-2 text-center">
      <span className="text-foreground-900 block font-medium">No workflows in production</span>
      <p className="text-foreground-400 max-w-[60ch] text-sm">
        To sync workflows to production, switch to Development environment, select a workflow and click on 'Sync to
        Production,' or sync via novu CLI for code-first workflows.
      </p>
    </div>

    <div className="flex items-center justify-center gap-6">
      <Link to={'https://docs.novu.co/platform/concepts/workflows'} target="_blank">
        <LinkButton trailingIcon={RiBookMarkedLine}>View docs</LinkButton>
      </Link>

      <Button variant="secondary" className="gap-2" onClick={switchToDev}>
        Switch to Development
      </Button>
    </div>
  </div>
);

const WorkflowListEmptyDev = () => {
  const navigate = useNavigate();
  const { environmentSlug } = useParams();

  return (
    <div className="flex h-full w-full flex-col items-center justify-center gap-6">
      <VersionControlDev />
      <div className="flex flex-col items-center gap-2 text-center">
        <span className="text-foreground-900 block font-medium">Create your first workflow to send notifications</span>
        <p className="text-foreground-400 max-w-[60ch] text-sm">
          Workflows handle notifications across multiple channels in a single, version-controlled flow, with the ability
          to manage preference for each subscriber.
        </p>
      </div>

      <div className="flex items-center justify-center gap-6">
        <Link to={'https://docs.novu.co/platform/concepts/workflows'} target="_blank">
          <LinkButton variant="gray" trailingIcon={RiBookMarkedLine}>
            View docs
          </LinkButton>
        </Link>

        <PermissionButton
          permission={PermissionsEnum.WORKFLOW_WRITE}
          variant="primary"
          leadingIcon={RiRouteFill}
          className="gap-2"
          onClick={() => {
            navigate(buildRoute(ROUTES.WORKFLOWS_CREATE, { environmentSlug: environmentSlug || '' }));
          }}
        >
          Create workflow
        </PermissionButton>
      </div>
    </div>
  );
};


### ANALISIS AUTOMATICO (ESPAÑOL) ###

import { PermissionsEnum } from '@novu/shared';
import { RiBookMarkedLine, RiRouteFill } from 'react-icons/ri';
import { Link, useNavigate, useParams } from 'react-router-dom';
import { VersionControlDev } from '@/components/icons/version-control-dev';
import { VersionControlProd } from '@/components/icons/version-control-prod';
Contiene declaraciones 'import' (posible Python u otro).

### SUGERENCIAS PARA CREAR TU PROPIA VERSIÓN ###

- Añade un README describiendo qué hace este archivo.
- Si es parte de un proyecto, indica dependencia y punto de entrada.



################################################################################
Archivo: novu-next/apps/dashboard/src/components/workflow-list.tsx
Tamaño: 6223 bytes
Lenguaje detectado: TSX

### CONTENIDO ORIGINAL ###

import { DirectionEnum, ListWorkflowResponse } from '@novu/shared';
import { RiMore2Fill } from 'react-icons/ri';
import { useSearchParams } from 'react-router-dom';
import { Skeleton } from '@/components/primitives/skeleton';
import {
  Table,
  TableBody,
  TableCell,
  TableFooter,
  TableHead,
  TableHeader,
  TableHeadSortDirection,
  TableRow,
} from '@/components/primitives/table';
import { TablePaginationFooter } from '@/components/primitives/table-pagination-footer';
import { WorkflowListEmpty } from '@/components/workflow-list-empty';
import { WorkflowRow } from '@/components/workflow-row';
import { ServerErrorPage } from '@/pages/server-error-page';

export type SortableColumn = 'name' | 'updatedAt' | 'lastTriggeredAt';

interface WorkflowListProps {
  data?: ListWorkflowResponse;
  isLoading?: boolean;
  isError?: boolean;
  limit?: number;
  orderBy?: SortableColumn;
  orderDirection?: TableHeadSortDirection;
  hasActiveFilters?: boolean;
  onClearFilters?: () => void;
  onPageSizeChange?: (pageSize: number) => void;
}

interface WorkflowListSkeletonProps {
  limit: number;
}

function WorkflowListSkeleton({ limit }: WorkflowListSkeletonProps) {
  return (
    <>
      {new Array(limit).fill(0).map((_, index) => (
        <TableRow key={index}>
          <TableCell className="flex flex-col gap-1 font-medium">
            <Skeleton className="h-5 w-[20ch]" />
            <Skeleton className="h-3 w-[15ch] rounded-full" />
          </TableCell>
          <TableCell>
            <Skeleton className="h-5 w-[6ch] rounded-full" />
          </TableCell>
          <TableCell>
            <Skeleton className="h-5 w-[8ch] rounded-full" />
          </TableCell>
          <TableCell>
            <Skeleton className="h-5 w-[7ch] rounded-full" />
          </TableCell>
          <TableCell className="text-foreground-600 text-sm font-medium">
            <Skeleton className="h-5 w-[14ch] rounded-full" />
          </TableCell>
          <TableCell className="text-foreground-600 text-sm font-medium">
            <Skeleton className="h-5 w-[14ch] rounded-full" />
          </TableCell>
          <TableCell className="text-foreground-600 text-sm font-medium">
            <RiMore2Fill className="size-4 opacity-50" />
          </TableCell>
        </TableRow>
      ))}
    </>
  );
}

export function WorkflowList({
  data,
  isLoading,
  isError,
  limit = 10,
  orderBy,
  orderDirection,
  hasActiveFilters,
  onClearFilters,
  onPageSizeChange,
}: WorkflowListProps) {
  const [searchParams, setSearchParams] = useSearchParams();

  const offset = parseInt(searchParams.get('offset') || '0');
  const currentPage = Math.floor(offset / limit) + 1;
  const totalPages = Math.ceil((data?.totalCount || 0) / limit);

  const navigateToPage = (newPage: number) => {
    const newOffset = (newPage - 1) * limit;
    setSearchParams((prev) => {
      const newParams = new URLSearchParams(prev);
      newParams.set('offset', newOffset.toString());
      return newParams;
    });
  };

  const handlePreviousPage = () => navigateToPage(Math.max(1, currentPage - 1));
  const handleNextPage = () => navigateToPage(Math.min(totalPages, currentPage + 1));

  const handlePageSizeChange = (newPageSize: number) => {
    setSearchParams((prev) => {
      const newParams = new URLSearchParams(prev);
      newParams.set('limit', newPageSize.toString());
      newParams.set('offset', '0'); // Reset to first page when changing page size
      return newParams;
    });
    onPageSizeChange?.(newPageSize);
  };

  const toggleSort = (column: SortableColumn) => {
    const newDirection =
      column === orderBy
        ? orderDirection === DirectionEnum.DESC
          ? DirectionEnum.ASC
          : DirectionEnum.DESC
        : DirectionEnum.DESC;
    searchParams.set('orderDirection', newDirection);
    searchParams.set('orderBy', column);
    setSearchParams(searchParams);
  };

  if (isError) return <ServerErrorPage />;

  if (!isLoading && data?.totalCount === 0) {
    return <WorkflowListEmpty emptySearchResults={hasActiveFilters} onClearFilters={onClearFilters} />;
  }

  return (
    <div className="flex h-full flex-col">
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead
              sortable
              sortDirection={orderBy === 'name' ? orderDirection : false}
              onSort={() => toggleSort('name')}
            >
              Workflows
            </TableHead>
            <TableHead>Status</TableHead>
            <TableHead>Steps</TableHead>
            <TableHead>Tags</TableHead>
            <TableHead
              sortable
              sortDirection={orderBy === 'lastTriggeredAt' ? orderDirection : false}
              onSort={() => toggleSort('lastTriggeredAt')}
            >
              Last triggered
            </TableHead>
            <TableHead
              sortable
              sortDirection={orderBy === 'updatedAt' ? orderDirection : false}
              onSort={() => toggleSort('updatedAt')}
            >
              Last updated
            </TableHead>

            <TableHead />
          </TableRow>
        </TableHeader>
        <TableBody>
          {isLoading ? (
            <WorkflowListSkeleton limit={limit} />
          ) : (
            <>
              {data?.workflows.map((workflow) => (
                <WorkflowRow key={workflow._id} workflow={workflow} />
              ))}
            </>
          )}
        </TableBody>
        {data && (
          <TableFooter>
            <TableRow>
              <TableCell colSpan={7} className="p-0">
                <TablePaginationFooter
                  pageSize={limit}
                  currentPageItemsCount={data.workflows.length}
                  onPreviousPage={handlePreviousPage}
                  onNextPage={handleNextPage}
                  onPageSizeChange={handlePageSizeChange}
                  hasPreviousPage={currentPage > 1}
                  hasNextPage={currentPage < totalPages}
                  itemName="workflows"
                  totalCount={data.totalCount}
                />
              </TableCell>
            </TableRow>
          </TableFooter>
        )}
      </Table>
    </div>
  );
}


### ANALISIS AUTOMATICO (ESPAÑOL) ###

import { DirectionEnum, ListWorkflowResponse } from '@novu/shared';
import { RiMore2Fill } from 'react-icons/ri';
import { useSearchParams } from 'react-router-dom';
import { Skeleton } from '@/components/primitives/skeleton';
import {
Contiene declaraciones 'import' (posible Python u otro).

### SUGERENCIAS PARA CREAR TU PROPIA VERSIÓN ###

- Añade un README describiendo qué hace este archivo.
- Si es parte de un proyecto, indica dependencia y punto de entrada.



################################################################################
Archivo: novu-next/apps/dashboard/src/components/workflow-row.tsx
Tamaño: 22110 bytes
Lenguaje detectado: TSX

### CONTENIDO ORIGINAL ###

import {
  DEFAULT_LOCALE,
  EnvironmentTypeEnum,
  FeatureFlagsKeysEnum,
  IEnvironment,
  PermissionsEnum,
  WorkflowListResponseDto,
} from '@novu/shared';
import { FilesIcon } from 'lucide-react';
import { ComponentProps, useState } from 'react';
import { CgBolt } from 'react-icons/cg';
import { FaCode } from 'react-icons/fa6';
import { LuBookUp2 } from 'react-icons/lu';
import {
  RiDeleteBin2Line,
  RiFlashlightLine,
  RiMore2Fill,
  RiPauseCircleLine,
  RiPlayCircleLine,
  RiPulseFill,
  RiRouteFill,
  RiTranslate2,
} from 'react-icons/ri';

import { Link, useNavigate } from 'react-router-dom';
import { type ExternalToast } from 'sonner';
import { PAUSE_MODAL_TITLE, PauseModalDescription } from '@/components/pause-workflow-dialog';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuItem,
  DropdownMenuPortal,
  DropdownMenuSeparator,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuTrigger,
} from '@/components/primitives/dropdown-menu';
import { TableCell, TableRow } from '@/components/primitives/table';
import { Tooltip, TooltipContent, TooltipPortal, TooltipTrigger } from '@/components/primitives/tooltip';
import TruncatedText from '@/components/truncated-text';
import { WorkflowStatus } from '@/components/workflow-status';
import { WorkflowSteps } from '@/components/workflow-steps';
import { WorkflowTags } from '@/components/workflow-tags';
import { IS_SELF_HOSTED, LEGACY_DASHBOARD_URL, SELF_HOSTED_UPGRADE_REDIRECT_URL } from '@/config';
import { useAuth } from '@/context/auth/hooks';
import { useEnvironment, useFetchEnvironments } from '@/context/environment/hooks';
import { useDeleteWorkflow } from '@/hooks/use-delete-workflow';
import { useFeatureFlag } from '@/hooks/use-feature-flag';
import { useHasPermission } from '@/hooks/use-has-permission';
import { usePatchWorkflow } from '@/hooks/use-patch-workflow';
import { useSyncWorkflow } from '@/hooks/use-sync-workflow';
import { LocalizationResourceEnum } from '@/types/translations';
import { ResourceOriginEnum, WorkflowStatusEnum } from '@/utils/enums';
import { formatDateSimple } from '@/utils/format-date';
import { Protect } from '@/utils/protect';
import { buildRoute, ROUTES } from '@/utils/routes';
import { cn } from '@/utils/ui';
import { ConfirmationModal } from './confirmation-modal';
import { DeleteWorkflowDialog } from './delete-workflow-dialog';
import { TranslatedWorkflowIcon } from './icons/translated-workflow';
import { CompactButton } from './primitives/button-compact';
import { CopyButton } from './primitives/copy-button';
import { ToastIcon } from './primitives/sonner';
import { showToast } from './primitives/sonner-helpers';
import { TimeDisplayHoverCard } from './time-display-hover-card';

// Local type definition for step issues until the shared types are updated
type RuntimeIssue = {
  message: string;
  variableName?: string;
  issueType: string;
};

type StepIssue = {
  controls?: Record<string, RuntimeIssue[]>;
  integration?: Record<string, RuntimeIssue[]>;
};

type StepListItem = {
  slug: string;
  type: string;
  issues?: StepIssue;
};

type WorkflowRowProps = {
  workflow: WorkflowListResponseDto & {
    steps?: StepListItem[];
  };
};

const toastOptions: ExternalToast = {
  position: 'bottom-right',
  classNames: {
    toast: 'mb-4 right-0',
  },
};

type WorkflowLinkTableCellProps = ComponentProps<typeof TableCell>;

const WorkflowLinkTableCell = (props: WorkflowLinkTableCellProps) => {
  const { children, className, ...rest } = props;

  return (
    <TableCell className={cn('group-hover:bg-neutral-alpha-50 relative', className)} {...rest}>
      {children}
      <span className="sr-only">Edit workflow</span>
    </TableCell>
  );
};

export const WorkflowRow = ({ workflow }: WorkflowRowProps) => {
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [isPauseModalOpen, setIsPauseModalOpen] = useState(false);
  const { currentEnvironment } = useEnvironment();
  const { isUserLoaded } = useAuth();
  const has = useHasPermission();
  const navigate = useNavigate();
  const { safeSync, PromoteConfirmModal } = useSyncWorkflow(workflow);
  const isHttpLogsPageEnabled = useFeatureFlag(FeatureFlagsKeysEnum.IS_HTTP_LOGS_PAGE_ENABLED, false);
  const isV0Workflow = workflow.origin === ResourceOriginEnum.NOVU_CLOUD_V1;
  const isDuplicable =
    workflow.origin === ResourceOriginEnum.NOVU_CLOUD && currentEnvironment?.type === EnvironmentTypeEnum.DEV;
  const workflowLink = isV0Workflow
    ? buildRoute(`${LEGACY_DASHBOARD_URL}/workflows/edit/:workflowId`, {
        workflowId: workflow._id,
      })
    : buildRoute(ROUTES.EDIT_WORKFLOW, {
        environmentSlug: currentEnvironment?.slug ?? '',
        workflowSlug: workflow.slug,
      });
  const triggerWorkflowLink = isV0Workflow
    ? buildRoute(`${LEGACY_DASHBOARD_URL}/workflows/edit/:workflowId/test-workflow`, { workflowId: workflow._id })
    : buildRoute(ROUTES.TRIGGER_WORKFLOW, {
        environmentSlug: currentEnvironment?.slug ?? '',
        workflowSlug: workflow.slug,
      });

  const translationsUrl = buildRoute(ROUTES.TRANSLATIONS_EDIT, {
    environmentSlug: currentEnvironment?.slug ?? '',
    resourceType: LocalizationResourceEnum.WORKFLOW,
    resourceId: workflow.workflowId,
    locale: DEFAULT_LOCALE,
  });

  const { deleteWorkflow, isPending: isDeleteWorkflowPending } = useDeleteWorkflow({
    onSuccess: () => {
      showToast({
        children: () => (
          <>
            <ToastIcon variant="success" />
            <span className="text-sm">
              Deleted workflow <span className="font-bold">{workflow.name}</span>.
            </span>
          </>
        ),
        options: toastOptions,
      });
    },
    onError: () => {
      showToast({
        children: () => (
          <>
            <ToastIcon variant="error" />
            <span className="text-sm">
              Failed to delete workflow <span className="font-bold">{workflow.name}</span>.
            </span>
          </>
        ),
        options: toastOptions,
      });
    },
  });

  const { patchWorkflow, isPending: isPauseWorkflowPending } = usePatchWorkflow({
    onSuccess: (data) => {
      showToast({
        children: () => (
          <>
            <ToastIcon variant="success" />
            <span className="text-sm">
              {data.active ? 'Enabled' : 'Paused'} workflow <span className="font-bold">{workflow.name}</span>.
            </span>
          </>
        ),
        options: toastOptions,
      });
    },
    onError: (_, { workflow }) => {
      showToast({
        children: () => (
          <>
            <ToastIcon variant="error" />
            <span className="text-sm">
              Failed to {workflow.active ? 'enable' : 'pause'} workflow{' '}
              <span className="font-bold">{workflow.name}</span>.
            </span>
          </>
        ),
        options: toastOptions,
      });
    },
  });

  const onDeleteWorkflow = async () => {
    await deleteWorkflow({
      workflowSlug: workflow.slug,
    });
  };

  const onPauseWorkflow = async () => {
    await patchWorkflow({
      workflowSlug: workflow.slug,
      workflow: {
        active: workflow.status === WorkflowStatusEnum.ACTIVE ? false : true,
      },
    });
  };

  const handlePauseWorkflow = () => {
    if (workflow.status === WorkflowStatusEnum.ACTIVE) {
      setTimeout(() => setIsPauseModalOpen(true), 0);
      return;
    }

    onPauseWorkflow();
  };

  const handleRowClick = () => {
    if (isV0Workflow && IS_SELF_HOSTED) {
      return;
    }

    if (isV0Workflow) {
      document.location.href = workflowLink;
    } else {
      navigate(workflowLink);
    }
  };

  const stopPropagation = (e: React.MouseEvent) => {
    // don't propagate the click event to the row
    e.stopPropagation();
  };

  if (!isUserLoaded) {
    return null;
  }

  return (
    <>
      <TableRow
        key={workflow._id}
        className={cn('group relative isolate cursor-pointer', isV0Workflow && IS_SELF_HOSTED && 'cursor-not-allowed')}
        onClick={handleRowClick}
      >
        {isV0Workflow && IS_SELF_HOSTED && (
          <Tooltip delayDuration={300}>
            <TooltipTrigger asChild>
              <div className="absolute inset-0 z-50" />
            </TooltipTrigger>
            <TooltipPortal>
              <TooltipContent side="bottom" align="center" className="z-50">
                <div className="gap-1">
                  <span className="font-medium">This workflow is not supported in this version of the dashboard</span>
                  <a
                    href={SELF_HOSTED_UPGRADE_REDIRECT_URL + '?utm_campaign=workflow_row_migration_guide'}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="text-primary ml-1 text-sm hover:underline"
                    onClick={stopPropagation}
                  >
                    view migration guide.
                  </a>
                </div>
              </TooltipContent>
            </TooltipPortal>
          </Tooltip>
        )}
        <WorkflowLinkTableCell className="flex items-center gap-2 font-medium">
          {workflow.origin === ResourceOriginEnum.EXTERNAL ? (
            <Tooltip delayDuration={300}>
              <TooltipTrigger>
                <FaCode className="text-warning size-4" />
              </TooltipTrigger>
              <TooltipPortal>
                <TooltipContent>
                  <span className="font-medium">Code Workflow</span>
                  <span className="text-foreground-400 block text-xs">Managed via your codebase</span>
                  {workflow.isTranslationEnabled && (
                    <span className="text-foreground-400 block text-xs">Translations enabled</span>
                  )}
                </TooltipContent>
              </TooltipPortal>
            </Tooltip>
          ) : workflow.origin === ResourceOriginEnum.NOVU_CLOUD_V1 ? (
            <Tooltip delayDuration={300}>
              <TooltipTrigger>
                <CgBolt className="text-feature size-4" />
              </TooltipTrigger>
              <TooltipPortal>
                <TooltipContent>
                  <span className="font-medium">Legacy Workflow</span>
                  <span className="text-foreground-400 block text-xs">Opens in legacy dashboard</span>
                </TooltipContent>
              </TooltipPortal>
            </Tooltip>
          ) : (
            <Tooltip delayDuration={300}>
              <TooltipTrigger>
                {workflow.isTranslationEnabled ? (
                  <TranslatedWorkflowIcon className="text-feature size-4" />
                ) : (
                  <RiRouteFill className="text-feature size-4" />
                )}
              </TooltipTrigger>
              <TooltipPortal>
                <TooltipContent>
                  <span className="font-medium">UI Workflow</span>
                  <span className="text-foreground-400 block text-xs">Managed in Novu Dashboard</span>
                  {workflow.isTranslationEnabled && (
                    <span className="text-foreground-400 block text-xs">Translations enabled</span>
                  )}
                </TooltipContent>
              </TooltipPortal>
            </Tooltip>
          )}
          <div>
            <div className="flex items-center gap-1">
              <TruncatedText className="max-w-[32ch]">{workflow.name}</TruncatedText>
            </div>
            <div className="flex items-center gap-1 transition-opacity duration-200">
              <TruncatedText className="text-foreground-400 font-code block max-w-[40ch] text-xs">
                {workflow.workflowId}
              </TruncatedText>

              <CopyButton
                className="z-10 flex size-2 p-0 px-1 opacity-0 group-hover:opacity-100"
                valueToCopy={workflow.workflowId}
                size="2xs"
              />
            </div>
          </div>
        </WorkflowLinkTableCell>
        <WorkflowLinkTableCell className="min-w-[200px]">
          <WorkflowStatus status={workflow.status} steps={workflow.steps || []} />
        </WorkflowLinkTableCell>
        <WorkflowLinkTableCell>
          <WorkflowSteps steps={workflow.stepTypeOverviews} />
        </WorkflowLinkTableCell>
        <WorkflowLinkTableCell>
          <WorkflowTags tags={workflow.tags || []} />
        </WorkflowLinkTableCell>

        <WorkflowLinkTableCell className="text-foreground-600 text-sm font-medium">
          {workflow.lastTriggeredAt ? (
            <TimeDisplayHoverCard date={new Date(workflow.lastTriggeredAt)}>
              {formatDateSimple(workflow.lastTriggeredAt)}
            </TimeDisplayHoverCard>
          ) : (
            <span className="text-foreground-400 text-sm font-normal">-</span>
          )}
        </WorkflowLinkTableCell>
        <WorkflowLinkTableCell className="text-foreground-600 text-sm font-medium">
          <TimeDisplayHoverCard date={new Date(workflow.updatedAt)}>
            {formatDateSimple(workflow.updatedAt)}
          </TimeDisplayHoverCard>
        </WorkflowLinkTableCell>

        <WorkflowLinkTableCell className="w-1">
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <CompactButton
                icon={RiMore2Fill}
                disabled={
                  !has({ permission: PermissionsEnum.EVENT_WRITE }) &&
                  !has({ permission: PermissionsEnum.WORKFLOW_WRITE }) &&
                  currentEnvironment?.type !== EnvironmentTypeEnum.DEV &&
                  !has({ permission: PermissionsEnum.NOTIFICATION_READ })
                }
                variant="ghost"
                className="z-10 h-8 w-8 p-0"
                data-testid="workflow-actions-menu"
              />
            </DropdownMenuTrigger>
            <DropdownMenuContent className="w-56" onClick={stopPropagation}>
              <Protect
                condition={(has) =>
                  has({ permission: PermissionsEnum.EVENT_WRITE }) ||
                  has({ permission: PermissionsEnum.WORKFLOW_WRITE }) ||
                  currentEnvironment?.type !== EnvironmentTypeEnum.DEV ||
                  has({ permission: PermissionsEnum.NOTIFICATION_READ })
                }
              >
                <DropdownMenuGroup>
                  <Protect permission={PermissionsEnum.EVENT_WRITE}>
                    <Link to={triggerWorkflowLink} reloadDocument={isV0Workflow}>
                      <DropdownMenuItem className="cursor-pointer">
                        <RiPlayCircleLine />
                        Trigger workflow
                      </DropdownMenuItem>
                    </Link>
                  </Protect>
                  <Protect permission={PermissionsEnum.WORKFLOW_WRITE}>
                    <SyncWorkflowMenuItem
                      currentEnvironment={currentEnvironment}
                      isSyncable={false}
                      tooltipContent="Syncing workflows is now performed in the top right corner of the navigation bar as Publish changes."
                      onSync={safeSync}
                    />
                  </Protect>
                  <Protect permission={PermissionsEnum.NOTIFICATION_READ}>
                    <Link
                      to={
                        buildRoute(isHttpLogsPageEnabled ? ROUTES.ACTIVITY_WORKFLOW_RUNS : ROUTES.ACTIVITY_FEED, {
                          environmentSlug: currentEnvironment?.slug ?? '',
                        }) +
                        '?' +
                        new URLSearchParams({ workflows: workflow._id }).toString()
                      }
                    >
                      <DropdownMenuItem className="cursor-pointer">
                        <RiPulseFill />
                        View activity
                      </DropdownMenuItem>
                    </Link>
                  </Protect>
                  {workflow.isTranslationEnabled && (
                    <Link to={translationsUrl}>
                      <DropdownMenuItem className="cursor-pointer">
                        <RiTranslate2 />
                        View translations
                      </DropdownMenuItem>
                    </Link>
                  )}
                  {currentEnvironment?.type === EnvironmentTypeEnum.DEV && (
                    <Protect permission={PermissionsEnum.WORKFLOW_WRITE}>
                      {isDuplicable ? (
                        <Link
                          to={buildRoute(ROUTES.WORKFLOWS_DUPLICATE, {
                            environmentSlug: currentEnvironment?.slug ?? '',
                            workflowId: workflow.workflowId,
                          })}
                        >
                          <DropdownMenuItem className="cursor-pointer">
                            <FilesIcon />
                            Duplicate workflow
                          </DropdownMenuItem>
                        </Link>
                      ) : (
                        <Tooltip>
                          <TooltipTrigger>
                            <DropdownMenuItem className="cursor-not-allowed opacity-60">
                              <FilesIcon />
                              Duplicate workflow
                            </DropdownMenuItem>
                          </TooltipTrigger>
                          <TooltipPortal>
                            <TooltipContent>
                              {workflow.origin === ResourceOriginEnum.NOVU_CLOUD_V1
                                ? 'V1 workflows cannot be duplicated using dashboard. Please visit the legacy portal.'
                                : 'External workflows cannot be duplicated using dashboard.'}
                            </TooltipContent>
                          </TooltipPortal>
                        </Tooltip>
                      )}
                    </Protect>
                  )}
                </DropdownMenuGroup>
              </Protect>
              <Protect permission={PermissionsEnum.WORKFLOW_WRITE}>
                <DropdownMenuSeparator />
                <DropdownMenuGroup className="*:cursor-pointer">
                  <DropdownMenuItem
                    onClick={handlePauseWorkflow}
                    disabled={workflow.status === WorkflowStatusEnum.ERROR}
                    data-testid={workflow.status === WorkflowStatusEnum.ACTIVE ? 'pause-workflow' : 'enable-workflow'}
                  >
                    {workflow.status === WorkflowStatusEnum.ACTIVE ? (
                      <>
                        <RiPauseCircleLine />
                        Pause workflow
                      </>
                    ) : (
                      <>
                        <RiFlashlightLine />
                        Enable workflow
                      </>
                    )}
                  </DropdownMenuItem>
                  {currentEnvironment?.type === EnvironmentTypeEnum.DEV && (
                    <DropdownMenuItem
                      className="text-destructive"
                      disabled={workflow.origin === ResourceOriginEnum.EXTERNAL}
                      onClick={() => {
                        setTimeout(() => setIsDeleteModalOpen(true), 0);
                      }}
                      data-testid="delete-workflow"
                    >
                      <RiDeleteBin2Line />
                      Delete workflow
                    </DropdownMenuItem>
                  )}
                </DropdownMenuGroup>
              </Protect>
            </DropdownMenuContent>
          </DropdownMenu>
        </WorkflowLinkTableCell>
      </TableRow>
      <DeleteWorkflowDialog
        workflow={workflow}
        open={isDeleteModalOpen}
        onOpenChange={setIsDeleteModalOpen}
        onConfirm={onDeleteWorkflow}
        isLoading={isDeleteWorkflowPending}
      />
      <ConfirmationModal
        open={isPauseModalOpen}
        onOpenChange={setIsPauseModalOpen}
        onConfirm={async () => {
          await onPauseWorkflow();
          setIsPauseModalOpen(false);
        }}
        title={PAUSE_MODAL_TITLE}
        description={<PauseModalDescription workflowName={workflow.name} />}
        confirmButtonText="Proceed"
        isLoading={isPauseWorkflowPending}
      />
      <PromoteConfirmModal />
    </>
  );
};

const SyncWorkflowMenuItem = ({
  currentEnvironment,
  isSyncable,
  tooltipContent,
  onSync,
}: {
  currentEnvironment: IEnvironment | undefined;
  isSyncable: boolean;
  tooltipContent: string | undefined;
  onSync: (targetEnvironmentId: string) => void;
}) => {
  const { currentOrganization } = useAuth();
  const { environments = [] } = useFetchEnvironments({ organizationId: currentOrganization?._id });
  const otherEnvironments = environments.filter((env: IEnvironment) => env._id !== currentEnvironment?._id);

  if (!isSyncable) {
    return (
      <Tooltip>
        <TooltipTrigger>
          <DropdownMenuItem disabled>
            <LuBookUp2 />
            Sync workflow
          </DropdownMenuItem>
        </TooltipTrigger>
        <TooltipPortal>
          <TooltipContent>{tooltipContent}</TooltipContent>
        </TooltipPortal>
      </Tooltip>
    );
  }

  if (otherEnvironments.length === 1) {
    return (
      <DropdownMenuItem onClick={() => onSync(otherEnvironments[0]._id)}>
        <LuBookUp2 />
        {`Sync to ${otherEnvironments[0].name}`}
      </DropdownMenuItem>
    );
  }

  return (
    <DropdownMenuSub>
      <DropdownMenuSubTrigger className="gap-2">
        <LuBookUp2 />
        Sync workflow
      </DropdownMenuSubTrigger>
      <DropdownMenuPortal>
        <DropdownMenuSubContent>
          {otherEnvironments.map((env) => (
            <DropdownMenuItem key={env._id} onClick={() => onSync(env._id)}>
              {env.name}
            </DropdownMenuItem>
          ))}
        </DropdownMenuSubContent>
      </DropdownMenuPortal>
    </DropdownMenuSub>
  );
};


### ANALISIS AUTOMATICO (ESPAÑOL) ###

import {
DEFAULT_LOCALE,
EnvironmentTypeEnum,
FeatureFlagsKeysEnum,
IEnvironment,
Contiene declaraciones 'import' (posible Python u otro).

### SUGERENCIAS PARA CREAR TU PROPIA VERSIÓN ###

- Añade un README describiendo qué hace este archivo.
- Si es parte de un proyecto, indica dependencia y punto de entrada.



################################################################################
Archivo: novu-next/apps/dashboard/src/components/workflow-status.tsx
Tamaño: 2025 bytes
Lenguaje detectado: TSX

### CONTENIDO ORIGINAL ###

import { ComponentProps } from 'react';
import { type IconType } from 'react-icons/lib';
import { RiCheckboxCircleFill, RiErrorWarningFill, RiForbidFill } from 'react-icons/ri';
import { WorkflowStatusEnum } from '@/utils/enums';
import { StatusBadge, StatusBadgeIcon } from './primitives/status-badge';
import { WorkflowIssuesPopover } from './workflow-issues-popover';

// Local type definition for step issues until the shared types are updated
type RuntimeIssue = {
  message: string;
  variableName?: string;
  issueType: string;
};

type StepIssue = {
  controls?: Record<string, RuntimeIssue[]>;
  integration?: Record<string, RuntimeIssue[]>;
};

type StepListItem = {
  slug: string;
  type: string;
  issues?: StepIssue;
};

type WorkflowStatusProps = {
  status: WorkflowStatusEnum;
  steps?: StepListItem[];
};

const statusRenderData: Record<
  WorkflowStatusEnum,
  {
    badgeVariant: ComponentProps<typeof StatusBadge>['status'];
    text: string;
    icon: IconType;
  }
> = {
  [WorkflowStatusEnum.ACTIVE]: {
    badgeVariant: 'completed',
    text: 'Active',
    icon: RiCheckboxCircleFill,
  },
  [WorkflowStatusEnum.INACTIVE]: {
    badgeVariant: 'disabled',
    text: 'Inactive',
    icon: RiForbidFill,
  },
  [WorkflowStatusEnum.ERROR]: {
    badgeVariant: 'failed',
    text: 'Action required',
    icon: RiErrorWarningFill,
  },
};

export const WorkflowStatus = (props: WorkflowStatusProps) => {
  const { status, steps = [] } = props;
  const badgeVariant = statusRenderData[status].badgeVariant;
  const Icon = statusRenderData[status].icon;
  const text = statusRenderData[status].text;

  const statusBadge = (
    <StatusBadge variant="light" status={badgeVariant}>
      <StatusBadgeIcon as={Icon} /> {text}
    </StatusBadge>
  );

  // Show popover only for ERROR status and when there are steps with issues
  if (status === WorkflowStatusEnum.ERROR && steps.length > 0) {
    return <WorkflowIssuesPopover steps={steps}>{statusBadge}</WorkflowIssuesPopover>;
  }

  return statusBadge;
};


### ANALISIS AUTOMATICO (ESPAÑOL) ###

import { ComponentProps } from 'react';
import { type IconType } from 'react-icons/lib';
import { RiCheckboxCircleFill, RiErrorWarningFill, RiForbidFill } from 'react-icons/ri';
import { WorkflowStatusEnum } from '@/utils/enums';
import { StatusBadge, StatusBadgeIcon } from './primitives/status-badge';
// Local type definition for step issues until the shared types are updated
Contiene declaraciones 'import' (posible Python u otro).

### SUGERENCIAS PARA CREAR TU PROPIA VERSIÓN ###

- Añade un README describiendo qué hace este archivo.
- Si es parte de un proyecto, indica dependencia y punto de entrada.



################################################################################
Archivo: novu-next/apps/dashboard/src/components/workflow-step.tsx
Tamaño: 1627 bytes
Lenguaje detectado: TSX

### CONTENIDO ORIGINAL ###

import { ComponentProps } from 'react';
import { IconType } from 'react-icons/lib';
import { Step, StepProps } from '@/components/primitives/step';
import { StepTypeEnum } from '@/utils/enums';
import { STEP_TYPE_TO_ICON } from './icons/utils';

type WorkflowStepProps = StepProps & {
  step: StepTypeEnum;
};

const stepRenderData: Record<StepTypeEnum, { variant: ComponentProps<typeof Step>['variant']; icon: IconType }> = {
  [StepTypeEnum.CHAT]: { variant: 'feature', icon: STEP_TYPE_TO_ICON[StepTypeEnum.CHAT] },
  [StepTypeEnum.CUSTOM]: { variant: 'alert', icon: STEP_TYPE_TO_ICON[StepTypeEnum.CUSTOM] },
  [StepTypeEnum.DELAY]: { variant: 'warning', icon: STEP_TYPE_TO_ICON[StepTypeEnum.DELAY] },
  [StepTypeEnum.DIGEST]: { variant: 'highlighted', icon: STEP_TYPE_TO_ICON[StepTypeEnum.DIGEST] },
  [StepTypeEnum.EMAIL]: { variant: 'information', icon: STEP_TYPE_TO_ICON[StepTypeEnum.EMAIL] },
  [StepTypeEnum.IN_APP]: { variant: 'stable', icon: STEP_TYPE_TO_ICON[StepTypeEnum.IN_APP] },
  [StepTypeEnum.PUSH]: { variant: 'verified', icon: STEP_TYPE_TO_ICON[StepTypeEnum.PUSH] },
  [StepTypeEnum.SMS]: { variant: 'destructive', icon: STEP_TYPE_TO_ICON[StepTypeEnum.SMS] },
  [StepTypeEnum.THROTTLE]: { variant: 'destructive', icon: STEP_TYPE_TO_ICON[StepTypeEnum.THROTTLE] },
  [StepTypeEnum.TRIGGER]: { variant: 'neutral', icon: STEP_TYPE_TO_ICON[StepTypeEnum.TRIGGER] },
};

export const WorkflowStep = (props: WorkflowStepProps) => {
  const { step, ...rest } = props;
  const Icon = stepRenderData[step].icon;

  return (
    <Step variant={stepRenderData[step].variant} {...rest}>
      <Icon />
    </Step>
  );
};


### ANALISIS AUTOMATICO (ESPAÑOL) ###

import { ComponentProps } from 'react';
import { IconType } from 'react-icons/lib';
import { Step, StepProps } from '@/components/primitives/step';
import { StepTypeEnum } from '@/utils/enums';
import { STEP_TYPE_TO_ICON } from './icons/utils';
Contiene declaraciones 'import' (posible Python u otro).

### SUGERENCIAS PARA CREAR TU PROPIA VERSIÓN ###

- Añade un README describiendo qué hace este archivo.
- Si es parte de un proyecto, indica dependencia y punto de entrada.



################################################################################
Archivo: novu-next/apps/dashboard/src/components/workflow-steps.tsx
Tamaño: 912 bytes
Lenguaje detectado: TSX

### CONTENIDO ORIGINAL ###

import { Step } from '@/components/primitives/step';
import { WorkflowStep } from '@/components/workflow-step';
import type { StepTypeEnum } from '@/utils/enums';

type WorkflowStepsProps = {
  steps: StepTypeEnum[];
};

export const WorkflowSteps = (props: WorkflowStepsProps) => {
  const { steps } = props;

  const sliceFactor = 4;
  let firstSteps: StepTypeEnum[] = [];
  let restSteps: StepTypeEnum[] = [];

  if (steps.length > sliceFactor) {
    firstSteps = steps.slice(0, sliceFactor - 1);
    restSteps = steps.slice(sliceFactor - 1);
  } else {
    firstSteps = steps;
  }

  return (
    <div className="flex items-center">
      <>
        {firstSteps.map((step, idx) => (
          <WorkflowStep key={`${step}_${idx}`} step={step} className="-ml-2 first-of-type:ml-0" />
        ))}
        {restSteps.length > 1 && <Step className="-ml-2">+{restSteps.length}</Step>}
      </>
    </div>
  );
};


### ANALISIS AUTOMATICO (ESPAÑOL) ###

import { Step } from '@/components/primitives/step';
import { WorkflowStep } from '@/components/workflow-step';
import type { StepTypeEnum } from '@/utils/enums';
type WorkflowStepsProps = {
Contiene declaraciones 'import' (posible Python u otro).

### SUGERENCIAS PARA CREAR TU PROPIA VERSIÓN ###

- Añade un README describiendo qué hace este archivo.
- Si es parte de un proyecto, indica dependencia y punto de entrada.



################################################################################
Archivo: novu-next/apps/dashboard/src/components/workflow-tags.tsx
Tamaño: 1017 bytes
Lenguaje detectado: TSX

### CONTENIDO ORIGINAL ###

import { Badge } from './primitives/badge';
import TruncatedText from './truncated-text';

type WorkflowTagsProps = {
  tags: string[];
};

export const WorkflowTags = (props: WorkflowTagsProps) => {
  const { tags } = props;

  const sliceFactor = 3;
  let firstTags: string[] = [];
  let restTags: string[] = [];

  if (tags.length > sliceFactor) {
    firstTags = tags.slice(0, sliceFactor - 1);
    restTags = tags.slice(sliceFactor - 1);
  } else {
    firstTags = tags;
  }

  return (
    <div className="flex min-w-0 flex-wrap items-center gap-1">
      <>
        {firstTags.map((tag) => (
          <Badge key={tag} color="purple" size="md" variant="lighter" className="max-w-[8rem] shrink-0">
            <TruncatedText className="block max-w-full">{tag}</TruncatedText>
          </Badge>
        ))}
        {restTags.length > 0 && (
          <Badge color="gray" size="md" variant="lighter" className="shrink-0">
            +{restTags.length}
          </Badge>
        )}
      </>
    </div>
  );
};


### ANALISIS AUTOMATICO (ESPAÑOL) ###

import { Badge } from './primitives/badge';
import TruncatedText from './truncated-text';
type WorkflowTagsProps = {
tags: string[];
Contiene declaraciones 'import' (posible Python u otro).

### SUGERENCIAS PARA CREAR TU PROPIA VERSIÓN ###

- Añade un README describiendo qué hace este archivo.
- Si es parte de un proyecto, indica dependencia y punto de entrada.



################################################################################
Archivo: novu-next/apps/dashboard/src/components/activity/activity-detail-card.tsx
Tamaño: 1628 bytes
Lenguaje detectado: TSX

### CONTENIDO ORIGINAL ###

import { ChevronDown } from 'lucide-react';
import { ReactNode, useState } from 'react';
import { cn } from '@/utils/ui';

interface ActivityDetailCardProps {
  title: ReactNode;
  timestamp?: string;
  expandable?: boolean;
  open?: boolean;
  children?: ReactNode;
}

export function ActivityDetailCard({ title, timestamp, expandable = false, open, children }: ActivityDetailCardProps) {
  const [internalOpen, setInternalOpen] = useState(false);
  const isExpanded = open ?? internalOpen;

  return (
    <div className="border-1 w-full overflow-hidden rounded-lg border border-neutral-100">
      <div
        className={cn('group flex w-full items-center px-3 py-2 hover:bg-neutral-50', expandable && 'cursor-pointer')}
        onClick={expandable ? () => setInternalOpen(!internalOpen) : undefined}
      >
        <span className="text-foreground-950 flex-1 text-left text-xs font-medium">{title}</span>
        <div className="flex items-center gap-2 pl-3">
          {timestamp && (
            <span className="text-xs text-[#717784] opacity-0 transition-opacity group-hover:opacity-100">
              {timestamp}
            </span>
          )}
          {expandable && (
            <ChevronDown className={cn('h-4 w-4 text-[#717784] transition-transform', isExpanded && 'rotate-180')} />
          )}
        </div>
      </div>
      {isExpanded && children && (
        <div className="border-t border-neutral-200 bg-neutral-50 p-3">
          <div className="text-foreground-600 text-xs">
            <div className="overflow-x-auto">{children}</div>
          </div>
        </div>
      )}
    </div>
  );
}


### ANALISIS AUTOMATICO (ESPAÑOL) ###

import { ChevronDown } from 'lucide-react';
import { ReactNode, useState } from 'react';
import { cn } from '@/utils/ui';
interface ActivityDetailCardProps {
Contiene declaraciones 'import' (posible Python u otro).

### SUGERENCIAS PARA CREAR TU PROPIA VERSIÓN ###

- Añade un README describiendo qué hace este archivo.
- Si es parte de un proyecto, indica dependencia y punto de entrada.



################################################################################
Archivo: novu-next/apps/dashboard/src/components/activity/activity-empty-state.tsx
Tamaño: 9138 bytes
Lenguaje detectado: TSX

### CONTENIDO ORIGINAL ###

import { PermissionsEnum } from '@novu/shared';
import { AnimatePresence, motion } from 'motion/react';
import { useMemo } from 'react';
import { RiCloseCircleLine, RiPlayCircleLine } from 'react-icons/ri';
import { useNavigate } from 'react-router-dom';
import { ActivityFilters } from '@/api/activity';
import { defaultActivityFilters } from '@/components/activity/constants';
import { Button } from '@/components/primitives/button';
import { useEnvironment } from '@/context/environment/hooks';
import { Protect } from '@/utils/protect';
import { buildRoute, ROUTES } from '@/utils/routes';
import { cn } from '@/utils/ui';
import { ExternalLink } from '../shared/external-link';

interface ActivityEmptyStateProps {
  className?: string;
  filters?: ActivityFilters;
  emptySearchResults?: boolean;
  emptySearchTitle?: string;
  emptySearchDescription?: string;
  emptyFiltersDescription?: string;
  onClearFilters?: () => void;
  onTriggerWorkflow?: () => void;
}

export function ActivityEmptyState({
  className,
  filters = defaultActivityFilters,
  emptySearchResults,
  onClearFilters,
  onTriggerWorkflow,
  emptySearchTitle = 'No activity matches that filter',
  emptySearchDescription = 'Try adjusting your filters to see more results.',
  emptyFiltersDescription = 'Your activity feed is empty. Once you trigger your first workflow, you can monitor notifications and view delivery details.',
}: ActivityEmptyStateProps) {
  const navigate = useNavigate();
  const { currentEnvironment } = useEnvironment();

  const handleNavigateToWorkflows = () => {
    navigate(buildRoute(ROUTES.WORKFLOWS, { environmentSlug: currentEnvironment?.slug ?? '' }));
  };

  const handleTriggerWorkflow = onTriggerWorkflow || handleNavigateToWorkflows;

  const emptyFiltersTitle = useMemo(() => {
    return `No activity in the past ${filters?.dateRange}`;
  }, [filters]);

  return (
    <AnimatePresence mode="wait">
      <motion.div
        key="empty-state"
        className={cn('flex h-full w-full items-center justify-center border-t border-t-neutral-200', className)}
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
        transition={{
          duration: 0.15,
          ease: [0.4, 0, 0.2, 1],
        }}
      >
        <motion.div
          initial={{ opacity: 0, scale: 0.98, y: 5 }}
          animate={{ opacity: 1, scale: 1, y: 0 }}
          exit={{ opacity: 0, scale: 0.98, y: 5 }}
          transition={{
            duration: 0.25,
            delay: 0.1,
            ease: [0.4, 0, 0.2, 1],
          }}
          className="flex flex-col items-center gap-6"
        >
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{
              duration: 0.2,
              delay: 0.2,
            }}
            className="relative"
          >
            <ActivityIllustration />
          </motion.div>

          <motion.div
            initial={{ opacity: 0, y: 5 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{
              duration: 0.2,
              delay: 0.25,
            }}
            className="flex flex-col items-center gap-2 text-center"
          >
            <h2 className="text-text-sub text-md font-medium">
              {emptySearchResults ? emptySearchTitle : emptyFiltersTitle}
            </h2>
            <p className="text-text-soft max-w-md text-sm font-normal">
              {emptySearchResults ? emptySearchDescription : emptyFiltersDescription}
            </p>
          </motion.div>

          {emptySearchResults && onClearFilters && (
            <motion.div
              initial={{ opacity: 0, y: 5 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{
                duration: 0.2,
                delay: 0.3,
              }}
              className="flex gap-6"
            >
              <Button variant="secondary" mode="outline" className="gap-2" onClick={onClearFilters}>
                <RiCloseCircleLine className="h-4 w-4" />
                Clear Filters
              </Button>
            </motion.div>
          )}

          {!emptySearchResults && (
            <motion.div
              initial={{ opacity: 0, y: 5 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{
                duration: 0.2,
                delay: 0.3,
              }}
              className="flex items-center gap-6"
            >
              <ExternalLink underline={false} variant="documentation" href="https://docs.novu.co" target="_blank">
                View Docs
              </ExternalLink>
              <Protect permission={PermissionsEnum.EVENT_WRITE}>
                <Button
                  leadingIcon={RiPlayCircleLine}
                  variant="primary"
                  className="gap-2"
                  onClick={handleTriggerWorkflow}
                >
                  Trigger Workflow
                </Button>
              </Protect>
            </motion.div>
          )}
        </motion.div>
      </motion.div>
    </AnimatePresence>
  );
}

function ActivityIllustration() {
  return (
    <svg width="137" height="126" viewBox="0 0 137 126" fill="none" xmlns="http://www.w3.org/2000/svg">
      <rect x="1" y="1" width="135" height="45" rx="7.5" stroke="#CACFD8" strokeDasharray="5 3" />
      <rect x="5" y="5" width="127" height="37" rx="5.5" fill="white" />
      <rect x="5" y="5" width="127" height="37" rx="5.5" stroke="#F2F5F8" />
      <path
        d="M68.5 29.5C65.1862 29.5 62.5 26.8138 62.5 23.5C62.5 20.1862 65.1862 17.5 68.5 17.5C71.8138 17.5 74.5 20.1862 74.5 23.5C74.5 26.8138 71.8138 29.5 68.5 29.5ZM68.5 28.3C69.773 28.3 70.9939 27.7943 71.8941 26.8941C72.7943 25.9939 73.3 24.773 73.3 23.5C73.3 22.227 72.7943 21.0061 71.8941 20.1059C70.9939 19.2057 69.773 18.7 68.5 18.7C67.227 18.7 66.0061 19.2057 65.1059 20.1059C64.2057 21.0061 63.7 22.227 63.7 23.5C63.7 24.773 64.2057 25.9939 65.1059 26.8941C66.0061 27.7943 67.227 28.3 68.5 28.3ZM67.6732 21.349L70.6006 23.3002C70.6335 23.3221 70.6605 23.3518 70.6792 23.3867C70.6979 23.4215 70.7076 23.4605 70.7076 23.5C70.7076 23.5395 70.6979 23.5785 70.6792 23.6133C70.6605 23.6482 70.6335 23.6779 70.6006 23.6998L67.6726 25.651C67.6365 25.6749 67.5946 25.6886 67.5513 25.6907C67.5081 25.6927 67.465 25.683 67.4268 25.6626C67.3886 25.6422 67.3567 25.6118 67.3344 25.5747C67.312 25.5376 67.3002 25.4951 67.3 25.4518V21.5482C67.3001 21.5048 67.3119 21.4622 67.3343 21.425C67.3567 21.3878 67.3887 21.3574 67.427 21.3369C67.4653 21.3165 67.5084 21.3068 67.5518 21.3089C67.5951 21.3111 67.6371 21.3249 67.6732 21.349Z"
        fill="#CACFD8"
      />
      <rect x="1" y="80" width="135" height="45" rx="7.5" stroke="#CACFD8" />
      <rect x="5" y="84" width="127" height="37" rx="5.5" fill="white" />
      <rect x="5" y="84" width="127" height="37" rx="5.5" stroke="#F2F5F8" />
      <path
        d="M16.5 98.5C16.5 95.1863 19.1863 92.5 22.5 92.5H30.5C33.8137 92.5 36.5 95.1863 36.5 98.5V106.5C36.5 109.814 33.8137 112.5 30.5 112.5H22.5C19.1863 112.5 16.5 109.814 16.5 106.5V98.5Z"
        fill="#FBFBFB"
      />
      <path
        d="M26.4996 97.3572C26.144 97.3572 25.8568 97.6445 25.8568 98V98.3857C24.3902 98.6831 23.2853 99.9808 23.2853 101.536V101.913C23.2853 102.858 22.9378 103.77 22.311 104.477L22.1623 104.644C21.9936 104.832 21.9534 105.104 22.0559 105.335C22.1583 105.566 22.3893 105.714 22.6425 105.714H30.3568C30.6099 105.714 30.8389 105.566 30.9434 105.335C31.0478 105.104 31.0056 104.832 30.8369 104.644L30.6882 104.477C30.0614 103.77 29.7139 102.86 29.7139 101.913V101.536C29.7139 99.9808 28.609 98.6831 27.1425 98.3857V98C27.1425 97.6445 26.8552 97.3572 26.4996 97.3572ZM27.4097 107.267C27.6507 107.026 27.7853 106.699 27.7853 106.357H26.4996H25.2139C25.2139 106.699 25.3485 107.026 25.5896 107.267C25.8306 107.508 26.1581 107.643 26.4996 107.643C26.8411 107.643 27.1686 107.508 27.4097 107.267Z"
        fill="#E1E4EA"
      />
      <rect x="44.5" y="96.5" width="44" height="5" rx="2.5" fill="url(#paint0_linear_7279_27982)" />
      <rect x="44.5" y="103.5" width="77" height="5" rx="2.5" fill="url(#paint1_linear_7279_27982)" />
      <path d="M68.5 76.625V49.375" stroke="#E1E4EA" strokeWidth="0.75" strokeLinejoin="bevel" />
      <defs>
        <linearGradient
          id="paint0_linear_7279_27982"
          x1="33.8626"
          y1="98.6257"
          x2="95.511"
          y2="98.6257"
          gradientUnits="userSpaceOnUse"
        >
          <stop stopColor="#F1EFEF" />
          <stop offset="0.48" stopColor="#F9F8F8" />
          <stop offset="0.992158" stopColor="#F9F8F8" stopOpacity="0.75" />
        </linearGradient>
        <linearGradient
          id="paint1_linear_7279_27982"
          x1="25.8846"
          y1="105.626"
          x2="133.769"
          y2="105.626"
          gradientUnits="userSpaceOnUse"
        >
          <stop stopColor="#F1EFEF" />
          <stop offset="0.48" stopColor="#F9F8F8" />
          <stop offset="0.992158" stopColor="#F9F8F8" stopOpacity="0.75" />
        </linearGradient>
      </defs>
    </svg>
  );
}


### ANALISIS AUTOMATICO (ESPAÑOL) ###

import { PermissionsEnum } from '@novu/shared';
import { AnimatePresence, motion } from 'motion/react';
import { useMemo } from 'react';
import { RiCloseCircleLine, RiPlayCircleLine } from 'react-icons/ri';
import { useNavigate } from 'react-router-dom';
Contiene declaraciones 'import' (posible Python u otro).

### SUGERENCIAS PARA CREAR TU PROPIA VERSIÓN ###

- Añade un README describiendo qué hace este archivo.
- Si es parte de un proyecto, indica dependencia y punto de entrada.



################################################################################
Archivo: novu-next/apps/dashboard/src/components/activity/activity-error.tsx
Tamaño: 382 bytes
Lenguaje detectado: TSX

### CONTENIDO ORIGINAL ###

import { motion } from 'motion/react';

import { fadeIn } from '@/utils/animation';

export const ActivityError = () => {
  return (
    <motion.div {...fadeIn}>
      <div className="flex h-96 items-center justify-center border-t border-neutral-200">
        <div className="text-foreground-600 text-sm">Failed to load activity details</div>
      </div>
    </motion.div>
  );
};
