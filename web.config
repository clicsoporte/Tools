<?xml version="1.0" encoding="utf-8"?>
<!--
    Este archivo de configuración está optimizado para ejecutar una aplicación Next.js 14+
    en un entorno de IIS utilizando el módulo iisnode.
-->
<configuration>
  <system.webServer>
    <handlers>
      <!-- 
        Indica que iisnode debe manejar las solicitudes que coinciden con el archivo server.js de Next.js.
        Este es el punto de entrada de nuestra aplicación en producción.
      -->
      <add name="iisnode" path="node_modules/next/dist/server/next-server.js" verb="*" modules="iisnode" />
    </handlers>

    <!-- 
      El módulo URL Rewrite es CRUCIAL para que Next.js funcione correctamente en IIS.
      Maneja las rutas estáticas y el enrutamiento del lado del cliente.
    -->
    <rewrite>
      <rules>
        <!--
          Regla 1: No interceptar las solicitudes de depuración de iisnode.
        -->
        <rule name="iisnode-debug" stopProcessing="true">
          <match url="^node_modules/next/dist/server/next-server.js/debug" />
          <action type="None" />
        </rule>

        <!--
          Regla 2: Servir directamente los archivos estáticos de Next.js (_next/static).
          Esto es clave para el rendimiento, ya que IIS sirve estos archivos sin pasar por Node.js.
        -->
        <rule name="next-static">
          <action type="Rewrite" url="public{REQUEST_URI}" />
          <match url="^(_next/.+)" />
        </rule>
        
        <!--
          Regla 3: Enviar todas las demás solicitudes al manejador de Node.js (nuestro server.js).
          Esto permite que el enrutador de Next.js (App Router) funcione correctamente.
        -->
        <rule name="node">
          <action type="Rewrite" url="node_modules/next/dist/server/next-server.js" />
          <match url="/*" />
        </rule>
      </rules>
    </rewrite>

    <!--
      Configuración de iisnode:
      - loggingEnabled: Activa la creación de logs, esencial para la depuración.
      - devErrorsEnabled: Muestra errores detallados en el navegador (solo para desarrollo, usar con precaución en producción).
      - node_env: Establece la variable de entorno para que Next.js sepa que está en modo producción.
    -->
    <iisnode
      loggingEnabled="true"
      logDirectory="iisnode"
      devErrorsEnabled="true"
      node_env="production"
      interceptor="docs/deployment/iisnode-interceptor.js"
       />

     <!-- 
        Asegura que el documento por defecto sea manejado por nuestras reglas de reescritura
        y no por IIS directamente.
     -->
    <defaultDocument>
      <files>
        <clear />
        <add value="node_modules/next/dist/server/next-server.js" />
      </files>
    </defaultDocument>

     <!--
      Aumenta el límite de tamaño del cuerpo de la solicitud para permitir cargas de archivos
      más grandes, como backups de bases de datos o logos. El valor está en bytes.
      Aquí se establece en ~100MB, que es más que suficiente.
     -->
    <security>
      <requestFiltering>
        <requestLimits maxAllowedContentLength="104857600" />
      </requestFiltering>
    </security>

  </system.webServer>
</configuration>
