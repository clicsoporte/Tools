<?xml version="1.0" encoding="UTF-8"?>
<!-- 
    IMPORTANTE: Este archivo es la configuración para IIS (Internet Information Services) en Windows.
    Asegura que Next.js funcione correctamente y permite que IIS sirva archivos estáticos
    directamente para un mejor rendimiento.
-->
<configuration>
    <!-- 
        Sección para el runtime de ASP.NET. Aunque es una app de Node.js, esta configuración 
        puede ser heredada y es crucial para peticiones grandes.
        maxRequestLength está en KILOBYTES. 51200 KB = 50 MB.
    -->
    <system.web>
        <httpRuntime maxRequestLength="51200" />
    </system.web>

    <system.webServer>
        <!-- 
            Manejador principal que pasa las peticiones a Node.js a través de iisnode.
            El atributo "path" debe apuntar al archivo server.js generado por 'npm run build'.
        -->
        <handlers>
            <add name="iisnode" path="server.js" verb="*" modules="iisnode" />
        </handlers>

        <!-- 
            Reglas de reescritura de URL. Esenciales para que las rutas de Next.js funcionen.
            1. Sirve archivos estáticos de la carpeta .next/static directamente.
            2. Sirve archivos públicos (imágenes, etc.) directamente.
            3. Envía todas las demás peticiones a Next.js (server.js).
        -->
        <rewrite>
            <rules>
                <rule name="NodeInspector" patternSyntax="ECMAScript" stopProcessing="true">
                    <match url="^server.js\/debug[\/]?" />
                </rule>

                <rule name="StaticContent" stopProcessing="true">
                    <match url="^(\.next\/static|public)\/.*" />
                    <action type="Rewrite" url="{REQUEST_URI}" />
                </rule>
                
                <rule name="DynamicContent">
                    <conditions>
                        <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="True" />
                    </conditions>
                    <action type="Rewrite" url="server.js" />
                </rule>
            </rules>
            <!-- 
                Este interceptor ayuda a manejar correctamente las rutas del lado del cliente (Client-Side Routing) de Next.js,
                evitando errores 404 en la navegación de la aplicación de una sola página (SPA).
            -->
             <outboundRules>
                <preConditions>
                    <preCondition name="IsHTML">
                        <add input="{RESPONSE_CONTENT_TYPE}" pattern="^text/html" />
                    </preCondition>
                </preConditions>
                <rule name="AddInterceptor" preCondition="IsHTML">
                    <match filterByTags="Script" pattern="^/((.next/static|public)/.*)" negate="true" />
                    <action type="Rewrite" value="iisnode-interceptor.js" />
                </rule>
            </outboundRules>
        </rewrite>
        
        <!-- 
            Desactiva el cacheo de kernel para iisnode, lo que a veces soluciona problemas de contenido obsoleto.
        -->
        <caching enabled="false" enableKernelCache="false" />

        <!-- 
            Configuración de seguridad para el filtrado de peticiones.
            maxAllowedContentLength está en BYTES. 52428800 bytes = 50 MB.
            Este es el límite principal de IIS para el tamaño de una petición.
        -->
        <security>
            <requestFiltering>
                <requestLimits maxAllowedContentLength="52428800" />
            </requestFiltering>
        </security>
        
        <!--
            Configuración de iisnode.
            - loggingEnabled: Activa los logs de stdout y stderr.
            - devErrorsEnabled: Muestra errores detallados en desarrollo.
            - nodeProcessCommandLine: Asegura que se use la versión correcta de Node.js.
        -->
        <iisnode 
            loggingEnabled="true"
            devErrorsEnabled="true"
            nodeProcessCommandLine="&quot;%programfiles%\nodejs\node.exe&quot;"
        />
    </system.webServer>
</configuration>
